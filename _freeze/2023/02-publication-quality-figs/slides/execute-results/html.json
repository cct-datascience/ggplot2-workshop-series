{
  "hash": "002d6cf486abc9dfdd20f49293f8fe5f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Crafting Publication Quality Data Visualizations with ggplot2\"\nauthor: \"Eric R. Scott\"\nformat: \n  uaz-revealjs:\n    code-link: true\n    link-external-icon: true\n    link-external-newwindow: true\n    incremental: true\n    fig-width: 7\n    fig-height: 3.5\n    theme: \n      - \"custom.scss\"\n    slide-number: true\n    chalkboard: true\n    logo: logo.png\neditor: visual\nexecute: \n  echo: true\nknitr: \n  opts_chunk: \n    fig.align: \"center\"\n---\n\n\n## Learning Objectives\n\n-   Customize color palettes with accessibility in mind\n-   Customize legends\n-   Customizing axes (titles, labels, breaks)\n-   Customize appearance of plots with themes\n-   Arrange multi-panel figures\n-   Save high resolution or vector formats\n\n## Required Packages\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse) #includes ggplot2\nlibrary(palmerpenguins) #for data\nlibrary(patchwork) #multi-panel figures\nlibrary(colorspace)\n```\n:::\n\n\nTake a moment to check if these load and install them if you need to.\n\n## Journal Requirements\n\nJournals often require certain modifications to your plots to make them publication-ready\n\n-   High resolution\n-   Specific file types (TIFF, EPS, PDF are common)\n-   Figure size limits\n-   Font size suggestions\n\n::: notes\nGet audience suggestions before advancing bullets\n:::\n\n## Not required, but good practice\n\nOther modifications to the appearance of your plot are a good idea, but less often required by journals or reviewers\n\n-   Colorblind accessible colors\n-   Grey scale friendly colors\n-   Perceptually-even colors\n-   Screen-reader compatible\n-   High [data-ink ratio](https://infovis-wiki.net/wiki/Data-Ink_Ratio) (simplify plot, within reason)\n-   Arrangement of related plots into multi-panel figures\n\n::: notes\nGet audience suggestions before advancing bullets\n:::\n\n## Example plot 1 {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|2|3|4-5|6-7\"}\np1 <-\n  ggplot(penguins |> filter(!is.na(sex)),\n         aes(x = species, y = body_mass_g, shape = sex)) +\n  geom_point(alpha = 0.2,\n    position = position_jitterdodge(dodge.width = 0.75)) +\n  stat_summary(fun.data = mean_sdl,\n    position = position_dodge(width = 0.75))\np1\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-2-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n::: notes\nWalk through construction of basic plots *briefly*.\nEncourage students to copy and paste code.\n:::\n\n## Example plot 2 {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|2|3-9|10|11\"}\np2 <-\n  ggplot(penguins,\n         aes(\n           x = flipper_length_mm,\n           y = bill_length_mm,\n           color = species,\n           fill = species,\n           shape = species\n         )) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\np2\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-3-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Example plot 3 {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|5\"}\np3 <-\n  ggplot(penguins,\n         aes(\n           x = flipper_length_mm,\n           y = bill_depth_mm,\n           color = species,\n           fill = species,\n           shape = species\n         )) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\np3\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n# Custom Colors {.rainbow}\n\n## Color Palettes\n\nChoose a color palette that is:\n\n-   Colorblind friendly\n-   Greyscale friendly\n-   Perceptually even\n-   High contrast (with background & within palette)\n\n## Viridis {.smaller}\n\nThe viridis color palettes meet most of these criteria and are built-in to `ggplot2`.\nThey are available with `scale_fill_viridis_*()` and `scale_color_viridis_*()` functions.\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\nv <- ggplot(penguins,\n            aes(x = bill_length_mm, y = bill_depth_mm, color = body_mass_g)) +\n  geom_point(size = 4)\nv #default colors\n```\n\n::: {.cell-output-display}\n![Default color scale](slides_files/figure-revealjs/unnamed-chunk-5-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\nv + scale_color_viridis_c() #viridis colors\n```\n\n::: {.cell-output-display}\n![Viridis color scale](slides_files/figure-revealjs/unnamed-chunk-5-2.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Viridis variants {.smaller}\n\nOther viridis palettes are available by changing `option` in the scale function\n\n\n::: {.cell layout-ncol=\"3\" layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nv + scale_color_viridis_c(option = \"magma\")\n```\n\n::: {.cell-output-display}\n![magma](slides_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nv + scale_color_viridis_c(option = \"inferno\")\n```\n\n::: {.cell-output-display}\n![inferno](slides_files/figure-revealjs/unnamed-chunk-6-2.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nv + scale_color_viridis_c(option = \"plasma\")\n```\n\n::: {.cell-output-display}\n![plasma](slides_files/figure-revealjs/unnamed-chunk-6-3.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nv + scale_color_viridis_c(option = \"cividis\")\n```\n\n::: {.cell-output-display}\n![cividis](slides_files/figure-revealjs/unnamed-chunk-6-4.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nv + scale_color_viridis_c(option = \"rocket\")\n```\n\n::: {.cell-output-display}\n![rocket](slides_files/figure-revealjs/unnamed-chunk-6-5.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nv + scale_color_viridis_c(option = \"mako\")\n```\n\n::: {.cell-output-display}\n![mako](slides_files/figure-revealjs/unnamed-chunk-6-6.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Viridis customization\n\nThe upper end of viridis palettes tends to be very bright yellow.\nYou can limit the range of colors used with the `begin` and `end` arguments\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\nv + scale_color_viridis_c()\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\nv + scale_color_viridis_c(begin = 0.1, end = 0.9)\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-7-2.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Viridis for discrete data {.smaller}\n\nThe viridis palette can be used for discrete / categorical data with `scale_color_viridis_d()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np2 + scale_color_viridis_d(end = 0.9, option = \"C\")\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-8-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n::: callout-warning\n## Uh oh!\n\nThis only applied the new palette to the `color` aesthetic!\n:::\n\n## Applying palettes to multiple aesthetics {.smaller}\n\n*Usually* `color` and `fill` are mapped to the same data.\nYou can add both `scale_color_*()` and `scale_fill_*()` to a plot OR you can use the `aesthetics` argument.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np2 + \n  scale_color_viridis_d(aesthetics = c(\"color\", \"fill\"), end = 0.9, option = \"C\")\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Other color palettes\n\nThere are ***many*** places to get additional color palettes.\n\nA few of my favorites:\n\n::: nonincremental\n-   [colorspace 📦](https://hclwizard.org/r-colorspace/)\n-   [cols4all 📦](https://github.com/mtennekes/cols4all)\n-   [Comprehensive list of color palettes in r](https://github.com/EmilHvitfeldt/r-color-palettes#readme)\n:::\n\n::: callout-note\n## Activity\n\nLet's find a palette we like using `cols4all::4a_gui()`\n:::\n\n## Manual color palettes\n\nYou can always use your own colors using `scale_color_manual()` if you know the hex codes.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy_cols <- c(\"#B60A1C\",\"#E39802\",\"#309143\")\n\np2 + \n  scale_color_manual(values = my_cols, aesthetics = c(\"color\", \"fill\"))\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Manual color palettes\n\nUse a **named vector** to specify which colors go with which factor level\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"1-2|4|\"}\nmy_cols <- \n  c(\"Chinstrap\" = \"#B60A1C\", \"Gentoo\" = \"#E39802\", \"Adelie\" = \"#309143\")\np2 <- p2 + \n  scale_color_manual(values = my_cols, aesthetics = c(\"color\", \"fill\"))\np3 <- p3 +\n  scale_color_manual(values = my_cols, aesthetics = c(\"color\", \"fill\"))\n```\n:::\n\n\n. . .\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-12-1.png){fig-align='center' width=672}\n:::\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-12-2.png){fig-align='center' width=672}\n:::\n:::\n\n\n# Legends\n\n## Legend titles\n\nWe can set the name for scales a few ways: with `labs()` or with the `name=` argument of the scale.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np2 + labs(color = \"Penguin Species\")\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-13-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# Equivalent, but replaces existing color scale:\n# p2 + scale_color_discrete(name = \"Penguin Species\") \n```\n:::\n\n\n## Legend titles\n\nLegends for scales with the **same name** will be combined if possible\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n(p2 <- \n  p2 + labs(color = \"Penguin Species\",\n            shape = \"Penguin Species\",\n            fill = \"Penguin Species\"))\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-14-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Legend titles\n\nLet's do the same for `p3`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n(p3 <- \n  p3 + labs(color = \"Penguin Species\",\n            shape = \"Penguin Species\",\n            fill = \"Penguin Species\"))\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-15-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Legend labels\n\nWhat if we want to use the Latin name for the penguin species?\nWe can use the `labels` argument and a named vector.\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"|1-3|7|10\"}\nscinames <- c(\"Adelie\" = \"P. adeliae\",\n              \"Chinstrap\" = \"P. antarticus\",\n              \"Gentoo\" = \"P. papua\")\np2 <- p2 +\n  scale_color_manual(\n    values = my_cols,\n    labels = scinames,\n    aesthetics = c(\"color\", \"fill\")\n  ) +\n  scale_shape_discrete(labels = scinames)\n\np2\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-16-1.png){fig-align='center' width=864}\n:::\n:::\n\n\n## Legend labels\n\nLet's do the same for `p3`\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\np3 <- p3 +\n  scale_color_manual(\n    values = my_cols,\n    labels = scinames,\n    aesthetics = c(\"color\", \"fill\")\n  ) +\n  scale_shape_discrete(labels = scinames)\np3\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-17-1.png){fig-align='center' width=864}\n:::\n:::\n\n\n::: callout-tip\nIf there are many aesthetics that map to the same variable, it might be easier to change the factor levels in the data once instead of inside of every scale\n:::\n\n## Applying what we learned\n\nLet's apply what we learned to `p1` to capitalize the words in the legend\n\n-   Which `scale_` function?\n\n-   Which argument changes legend *title*?\n\n-   Which argument changes *labels*?\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-18-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Applying what we learned\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 <- p1 +\n  scale_shape(\n    name = \"Sex\",\n    labels = c(\"male\" = \"Male\", \"female\" = \"Female\")\n  )\np1\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-19-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n::: notes\nCode auto-complete isn't very helpful here because the only arguments to `scale_shape()` are `…` and `solid`.\nThis is a good opportunity to talk about what `…` do and how to learn what arguments a function with `…` can take by looking at what function `…` are passed to in the help file.\n:::\n\n# Axes\n\n## Axes\n\nAxes are also a type of scale.\nIn `p1` the x-axis corresponds to `scale_x_discrete()` and the y-axis corresponds to `scale_y_continuous()`.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-20-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Custom labels\n\nUse what we learned before to customize the categorical x-axis labels in `p1`!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n(p1 <- p1 + scale_x_discrete(name = \"Species\", labels = scinames))\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-21-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n::: notes\nThe nice thing about `ggplot2` is that it is designed around a *grammar*---once you learn how to do something once, you can usually apply it easily to new situations.\n:::\n\n## Custom labels\n\nIf you only want to change the axis title, you can also do that in `labs()`\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\n(p2 <- p2 + labs(x = \"Flipper Length (mm)\", y = \"Bill Length (mm)\"))\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-22-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n(p3 <- p3 + labs(x = \"Flipper Length (mm)\", y = \"Bill Depth (mm)\"))\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-22-2.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Custom breaks\n\nChange the (approximate) number of breaks with `n.breaks=`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n(p1 <- p1 + scale_y_continuous(name = \"Body Mass (g)\", n.breaks = 12))\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-23-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n::: notes\nThis uses \"pretty\" breaks at whole numbers, so you don't get *exactly* `n.breaks`\n:::\n\n## Custom breaks\n\nSpecify breaks *exactly* with `breaks=`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 + scale_y_continuous(breaks = c(3333, 5000, 5555))\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-24-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Axis limits {visibility=\"hidden\"}\n\nTwo ways to set axis limits:\n\n::: nonincremental\n-   In `scale_*()` or with `xlim()`/`ylim()` --- drops **data** outside of range\n-   With `coord_*()` --- only crops plot area\n:::\n\n## Axis limits {visibility=\"hidden\"}\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 + \n  scale_y_continuous(limits = c(2500, 5500), n.breaks = 12, name = \"Body Mass (g)\")\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-25-1.png){fig-align='center' width=480}\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 + \n  coord_cartesian(ylim = c(2500, 5500))\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-26-1.png){fig-align='center' width=480}\n:::\n:::\n\n:::\n:::\n\n::: notes\nIn the first example, the limits are removing data points *before* `stat_summary()` does its calculations, so no data points above 5500 g are used in calculating the mean and standard deviations used to draw the error bars and black points.\nIn the second example, the error bars are calculated using all the data and the plot area just cuts off at \\> 5500 g\n:::\n\n## Other useful `coord_`s {visibility=\"hidden\"}\n\n1:1 (or custom) ratio of axes with `coord_fixed()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np2 + coord_fixed()\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-27-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Other useful `coord_`s {visibility=\"hidden\"}\n\nHorizontal plots with `coord_flip()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 + coord_flip()\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-28-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n# Themes\n\n## Complete themes\n\nThere are several complete themes built-in to `ggplot2`, and many more available from other packages such as `ggthemes`.\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\np2 + theme_bw()\n```\n\n::: {.cell-output-display}\n![theme_bw()](slides_files/figure-revealjs/unnamed-chunk-29-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\np2 + theme_minimal()\n```\n\n::: {.cell-output-display}\n![theme_minimal()](slides_files/figure-revealjs/unnamed-chunk-29-2.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Fonts\n\nYou can customize font size and family with complete themes.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np2 + theme_bw(base_size = 9, base_family = \"Times New Roman\")\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-30-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Custom themes\n\nCustomizing themes \"manually\" involves knowing the name of the theme element and it's corresponding `element_*()` function.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 + theme(axis.title = element_text(face = \"bold\", colour = \"red\"))\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-31-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n::: notes\nTheme elements are hierarchical.\nE.g. `title` affects all title elements, `axis.title` affects all axis titles, `axis.title.x` only affects x-axis titles, and `axis.title.x.bottom` affects only the bottom x-axis title (in the case that there is a second x-axis on the top).\n:::\n\n## Custom themes\n\nIt's best to find a built-in `theme_*()` function that gets you most of the way there and then customize with `theme()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 + \n  theme_minimal(base_size = 10) + \n  theme(axis.line = element_line(linewidth = 0.5, lineend = \"round\"))\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-32-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Custom themes\n\n::: callout-note\n## Activity\n\nName some things about the appearance of `p1` that you want to change and we'll figure it out together!\n:::\n\n::: callout-tip\nCheck the examples in the help page for `theme()` <https://ggplot2.tidyverse.org/reference/theme.html> to figure out the names of theme elements\n:::\n\n## Re-using custom themes\n\nYou can save a custom theme as an R object and supply it to your plots.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy_theme <- \n  theme_minimal() + \n  theme(\n    axis.line = element_line(linewidth = 0.5, lineend = \"round\"),\n    axis.ticks = element_line(linewidth = 0.2),\n    legend.background = element_rect(linewidth = 0.2)\n  )\n\np2 + my_theme\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-33-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Re-using custom themes\n\nOr you can set your theme as the default at the top of your R script\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntheme_set(my_theme)\np3\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-34-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n# Multi-panel figures\n\n## Combine plots\n\nThe `patchwork` package makes it easy to combine `ggplot2` plots\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(patchwork)\np1 + p2\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-35-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Control layout\n\n::: columns\n::: {.column width=\"50%\"}\n::: nonincremental\n-   `+` wraps plots\n-   `|` combines plots horizontally\n-   `/` combines plots vertically\n-   `()` can be used to nest operations\n:::\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 / (p2 | p3)\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-36-1.png){fig-align='center' width=768}\n:::\n:::\n\n:::\n:::\n\n## Multi-panel figures {.smaller}\n\n::: nonincremental\n-   `plot_layout(guides = \"collect\")` combines duplicate legends\n-   `plot_annotation(tag_levels = \"a\")` adds labels to sub-plots\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|2|3|4\"}\np_combined <-\n  p1 /\n  (p2 + p3 + plot_layout(guides = \"collect\")) + \n  plot_annotation(tag_levels = \"a\", tag_suffix = \")\")\np_combined\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-37-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n# Saving plots 💾\n\n## Saving plots\n\nIf you know the dimensions, it's good to save plots early on and adjust theme to fit.\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|2|3|4-7|8\"}\nggsave(\n  filename = \"penguins.png\",\n  plot = p_combined,\n  width = 7, \n  height = 5, \n  units = \"in\", \n  dpi = \"print\",\n  bg = \"white\"\n)\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n![](penguins.png)\n:::\n:::\n\n::: notes\nThe file type is figured out based on the extension in `filename`.\n\nBy default, the last plot is the one saved, but it's good practice to specify `plot` anyways\n\nDimensions can be specified in pixels, inches, mm, etc.\n\n`dpi` is resolution and only applies to raster images.\n\n`bg` sets background color.\nIf you don't set this, the background of your plot is often transparent, which might not be the best for adding to presentations.\n\nNotice how the legends and points look too large with these dimensions.\nIt might be good to fix that.\n:::\n\n## Raster vs. Vector {.smaller}\n\n::: nonincremental\n-   Raster images (e.g. .jpg, .png, .tiff) are made of pixels and the resolution can vary.\n-   Vector images (e.g. .svg, .eps) are not made of pixels and don't have a resolution.\n-   Vector formats should be used whenever possible\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n::: {layout-ncol=\"2\"}\n![Raster (72 dpi .png file)](penguins-lores.png){fig-align=\"left\" width=\"300\"}\n\n![Vector (.svg file)](penguins.svg){fig-align=\"left\" width=\"300\"}\n:::\n\n::: notes\nOpen images in a new tab and zoom in on browser to demo the difference.\n\nVector formats are not only resolution-less, they are more compatible with screen readers and therefore more accessible.\n:::\n\n## Finished product!\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\nlibrary(tidyverse) #includes ggplot2\nlibrary(palmerpenguins) #for data\nlibrary(patchwork) #multi-panel figures\n\n# Custom theme\nmy_theme <- \n  theme_minimal(base_size = 10) + \n  theme(\n    axis.line = element_line(linewidth = 0.5, lineend = \"round\"),\n    axis.ticks = element_line(linewidth = 0.2),\n    legend.background = element_rect(linewidth = 0.2)\n  )\ntheme_set(my_theme)\n\n# plot 1\n\n## Custom function for stat_summary\nmean_sd <- function(x) {\n  data.frame(y = mean(x), ymin = mean(x) - sd(x), ymax = mean(x) + sd(x))\n}\n\n## For labeling with latin names\nscinames <- c(\"Adelie\" = \"P. adeliae\",\n              \"Chinstrap\" = \"P. antarticus\",\n              \"Gentoo\" = \"P. papua\")\n\np1 <-\n  ggplot(penguins |> filter(!is.na(sex)),\n         aes(x = species, y = body_mass_g, shape = sex)) +\n  geom_point(alpha = 0.2,\n             position = position_jitterdodge(dodge.width = 0.75)) +\n  stat_summary(fun.data = mean_sd,\n               position = position_dodge(width = 0.75)) +\n  scale_x_discrete(labels = scinames) +\n  scale_y_continuous(n.breaks = 12) +\n  labs(x = \"Species\", y = \"Body Mass (g)\")\n\n# Color palette for plot 2 and 3\nmy_cols <- \n  c(\"Chinstrap\" = \"#B60A1C\", \"Gentoo\" = \"#E39802\", \"Adelie\" = \"#309143\")\n\np2 <-\n  ggplot(penguins,\n         aes(\n           x = flipper_length_mm,\n           y = bill_length_mm,\n           color = species,\n           fill = species,\n           shape = species\n         )) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  scale_color_manual(\n    values = my_cols,\n    labels = scinames,\n    aesthetics = c(\"color\", \"fill\")\n  ) +\n  scale_shape_discrete(labels = scinames) +\n  labs(\n    color = \"Penguin Species\",\n    shape = \"Penguin Species\",\n    fill = \"Penguin Species\",\n    x = \"Flipper Length (mm)\",\n    y = \"Bill Length (mm)\"\n  )\n\np3 <-\n  ggplot(penguins,\n         aes(\n           x = flipper_length_mm,\n           y = bill_depth_mm,\n           color = species,\n           fill = species,\n           shape = species\n         )) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  scale_color_manual(\n    values = my_cols,\n    labels = scinames,\n    aesthetics = c(\"color\", \"fill\")\n  ) +\n  scale_shape_discrete(labels = scinames) +\n  labs(\n    color = \"Penguin Species\",\n    shape = \"Penguin Species\",\n    fill = \"Penguin Species\",\n    x = \"Flipper Length (mm)\",\n    y = \"Bill Length (mm)\"\n  )\n\n# combine into multi-panel figure\np_combined <-\n  p1 /\n  (p2 + p3 + plot_layout(guides = \"collect\")) + \n  plot_annotation(tag_levels = \"a\", tag_suffix = \")\")\n\np_combined\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-40-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Getting help\n\n::: nonincremental\n-   The [`ggplot2` documentation](https://ggplot2.tidyverse.org/) itself, in particular the examples on the [`theme()` page](https://ggplot2.tidyverse.org/reference/theme.html#ref-examples) and the [FAQ on customization](https://ggplot2.tidyverse.org/articles/faq-customising.html).\n\n-   The [R Graph Gallery](https://r-graph-gallery.com/) has a wide variety of plots with R code walkthroughs.\n\n-   The `ggplot2` book: <https://ggplot2-book.org/>\n:::\n\nYou can always come by our [drop-in hours](https://datascience.cct.arizona.edu/drop-in-hours) to ask questions as well!\n\n## Part 3 in two weeks!\n\n#### \"Exploring the wide world of `ggplot2` extensions\"\n\n🗓️ June 26\n\n⌚️ 11:00am--1:00pm\n\n[**Registration**](https://datascience.cct.arizona.edu/events/202-part-3-exploring-wide-world-ggplot2-extensions)\n",
    "supporting": [
      "slides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}