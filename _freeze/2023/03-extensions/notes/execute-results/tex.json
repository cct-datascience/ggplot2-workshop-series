{
  "hash": "4d9443adc14422862cc926eaa443860e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exploring the Wide World of ggplot2 Extensions\"\nsubtitle: \"Instructor notes\"\nauthors:\n  - Eric R. Scott\n  - Kristina Riemer\nformat: \n  html: default\n  pdf: default\neditor: visual\nexecute: \n  eval: false\n  echo: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(ggplot2)\n```\n:::\n\n\n\n# Intro\n\nGo through introductory [slides](https://cct-datascience.quarto.pub/exploring-the-wide-world-of-ggplot2-extensions/) to start.\nSpend time looking through the ggplot extension gallery and ask if there are any particular packages that look useful to folks.\nGet people to share their discoveries.\n\n# Demonstrations\n\nGo through vignette or other short demo of several extension packages.\n\n## `gganimate`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gganimate)\n```\n:::\n\n\n\n-   Animate plots and save as gifs\n\n-   Takes some getting used to lingo\n\n-   Can control: what changes over time with `transition_*`, how the view of the axes changes with `view_*`, how much \"memory\" of the change there is, with `shadow_*`, and how data appears and disappears with `enter_*` and `exit_*`\n\n-   Use `?` with functions to figure out what label name is\n\n-   These penguin plots don't really make sense because the data isn't same individuals over the years; should set group in `transition_states`\n\n-   Mention `animate()` for more control\n\n-   Resources:\n\n    -   [Bat data slides](https://goodekat.github.io/presentations/2019-isugg-gganimate-spooky/slides.html#1)\n\n    -   [Penguins code source](https://adiradaniel.netlify.app/post/gganimate/)\n\n## `esquisse`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(esquisse)\nlibrary(dplyr)\n```\n:::\n\n\n\n-   \"Esquisse\" means rough first sketch in French\n\n-   `esquisse` [vignette](https://dreamrs.github.io/esquisse/articles/get-started.html)\n\n-   Point and click to generate ggplot plots from data\n\n-   Good for exploring datasets (look at data too)\n\n-   Still have to modify dataset outside of tool, e.g., recoding factors\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins <- penguins %>% na.omit()\nesquisser(penguins)\n```\n:::\n\n\n\n-   Helpful things: color codes variables, suggests plot types\n\n-   Save plot as image file, or copy and paste code into console (uses `tidyverse`)\n\n-   Can add to Shiny app to let non-R users create ggplots of data\n\n## `plotly`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(plotly)\n```\n:::\n\n\n\n-   `plotly` R package is interface to a JavaScript library for making interactive data visualizations\n\n-   Only important to know that because if you search for `plotly` help, sometimes you'll get JavaScript code examples.\n\n-   `plotly` *kind of* uses the grammar of graphics, but building a plot from scratch is tricky\n\n-   `plotly` functions mostly take lists are arguments, which makes it very difficult to figure out what default values are or even what arguments functions can take.\n\n-   `ggplotly()` **transforms** `ggplot` objects into interactive `plotly` plots.\n    90% of the time it gets you 90% of the way there\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- \n  ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  labs(x = \"Bill length (mm)\", y = \"Bill depth (mm)\", color = \"Penguin Species\") +\n  theme_bw()\n\nggplotly(p)\n```\n:::\n\n\n\nBy default, you get:\n\n-   Drag a box to zoom, double-click to zoom out\n\n-   Tooltips on hover\n\n-   Ability to hide and show points by clicking on the legend\n\n-   Toolbar with tools including ability to download a PNG of the plot\n\nThis works in R Markdown or Quarto documents (i.e. there's not a way to make these plots \"stand-alone\"---they're rendered as HTML)\n\n### Types of plots\n\nWorks for most (all?) built-in geoms.\nWorks for some plots made with ggplot2 extensions also.\nDemo a few different geoms like `geom_boxplot()`, `geom_hisotgram()`, `geom_smooth()`\n\n### Customize tooltip\n\nYou can customize the info displayed in the tooltip with `ggplotly` .\nGive it additional aesthetic `text` to include something *only* as a tooltip.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- \n  ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  #Ignore unknown aesthetics warning\n  geom_point(aes(text = sex)) +\n  labs(x = \"Bill length (mm)\", y = \"Bill depth (mm)\", color = \"Penguin Species\") +\n  theme_bw()\n\nggplotly(p, tooltip = c(\"text\", \"bill_depth_mm\", \"bill_length_mm\"))\n```\n:::\n\n\n\n### Animations\n\nYou can use `ggplotly()` to make interactive animated plots by using the `frame` aesthetic\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gapminder) #dataset\nhead(gapminder)\np2 <- ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) +\n  geom_point(aes(size = pop, frame = year, ids = country)) +\n  scale_x_log10()\n\nggplotly(p2)\n```\n:::\n\n\n\n## `ggrepel`\n\nThe `ggrepel` package is helpful for directly labeling plots, especially when labels would otherwise overlap.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#make rownames into columns\ndat <- mtcars |> tibble::rownames_to_column(var = \"car\")\ndat\np3 <- \n  ggplot(dat,\n  aes(wt, mpg, label = car, colour = factor(cyl))) +\n  geom_point()\n#without ggrepel\np3 + geom_text()\np3 + geom_label()\nlibrary(ggrepel)\np3 + geom_text_repel()\np3 + geom_label_repel()\n```\n:::\n\n\n\n### Adjust appearance of labels\n\nBy default, little segments are drawn connecting labels to points only when labels are far enough away.\nThis can be adjusted.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np3 + geom_label_repel(min.segment.length = 0)\n```\n:::\n\n\n\n### Overlapping labels\n\nYou see a warning about labels being removed due to overlaps.\nMake text smaller, plot larger, adjust `max.overlaps` , force labels further apart, make it try harder to find positions that don't overlap.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#don't usually need to do all of these things, but they're some options\np4 <- \n  p3 + \n  geom_label_repel(\n    min.segment.length = 0,\n    #smaller labels\n    size = 3, \n    label.padding = 0.15,\n    #draw labels even if overlapping with things\n    max.overlaps = 15, #default is 10, increase to get more labels drawn\n    #force labels further from point\n    force = 5,\n    #ask it to try harder\n    max.time = 2,\n    max.iter = 15000,\n    show.legend = FALSE\n  )\np4\n```\n:::\n\n\n\n### Labels are random\n\nLabels are positioned randomly, so they're different every time a plot is rendered\n\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\np4\np4\n```\n:::\n\n\n\nYou can `set.seed()` at the top of your script to ensure reproducibility.\n\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nset.seed(123)\np4\nset.seed(123)\np4\n```\n:::\n\n\n\n### Label just some points\n\nYou can label just select points\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncars <- c(\"Volvo 142E\", \"Merc 230\")\nggplot(dat, aes(wt, mpg, label = ifelse(car %in% cars, car, \"\"))) +\n  geom_point(color = \"red\") +\n  geom_label_repel(min.segment.length = 0, nudge_x = 0.5, nudge_y = 3)\n```\n:::\n\n\n\n# Wrap-up\n\nGo through \"where to find help\" slides.\nPlug next workshop (our fall reproducibility series)\n\nAsk if there are any other remaining `ggplot2`-related roadblocks people are experiencing and workshop it live.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}