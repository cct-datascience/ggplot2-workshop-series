{
  "hash": "488e381c5d3edf0371876d9858b25de0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Understanding the foundations of 'ggplot2'\"\nauthor: Jessica Guo\nformat: \n  uaz-revealjs:\n    code-copy: true\n    code-link: true\n    df-print: kable\n    slide-number: true\n    chalkboard: true\n    mouse-wheel: false\n    logo: \"logo.png\"\neditor: visual\nexecute: \n  echo: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n## CCT Data Science `ggplot2` series\n\n::: incremental\nIn Part 1 of this series, we will:\n\n-   Explore the grammar of graphics\n\n-   Map data to aesthetics\n\n-   Understand layer components\n\n-   Interpret `ggplot2` documentation\n\n-   Create a layered plot\n\n-   Introduce function and syntax of visual elements\n:::\n\n# The grammar of graphics\n\n## What is a grammar?\n\n\"The fundamental principles or rules of an art or science\" - Oxford English Dictionary\n\n::: incremental\n-   reveal composition of complicated graphics\n\n-   strong foundation for understanding a range of graphics\n\n-   guide for well-formed or correct graphics\n:::\n\n::: callout-note\nSee [\"The Grammar of Graphics\"](https://link.springer.com/book/10.1007/0-387-28695-0) by Leland Wilkinson (2005) and [\"A Layered Grammar of Graphics\"](https://vita.had.co.nz/papers/layered-grammar.html) by Hadley Wickham (2010)\n:::\n\n## Layered grammar of graphics\n\n::: columns\n::: {.column width=\"40%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-1-1.png){width=384}\n:::\n:::\n\n\n![](img/penguins.png){width=\"350\" fig-align=\"center\" fig-alt=\"Cartoon image of three Chinstrap, Gentoo, and Adelie penguins.\"}\n:::\n\n::: {.column width=\"60%\"}\n`ggplot2` builds complex plots iteratively, one layer at a time.\n\n::: incremental\n-   What are the necessary components of a plot?\n\n-   What are necessary components of a layer?\n:::\n:::\n:::\n\n## Components of a plot\n\n::: columns\n::: {.column width=\"40%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-2-1.png){width=384}\n:::\n:::\n\n\n![](img/penguins.png){width=\"350\" fig-align=\"center\" fig-alt=\"Cartoon image of three Chinstrap, Gentoo, and Adelie penguins.\"}\n:::\n\n::: {.column width=\"60%\"}\nA plot contains:\n\n::: incremental\n-   Data and aesthetic mapping\n\n-   Layer(s) containing geometric object(s) and statistical transformation(s)\n\n-   Scales\n\n-   Coordinate system\n\n-   (Optional) facets or themes\n:::\n:::\n:::\n\n## Components of a layer\n\n::: columns\n::: {.column width=\"40%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-3-1.png){width=384}\n:::\n:::\n\n\n![](img/penguins.png){width=\"350\" fig-align=\"center\" fig-alt=\"Cartoon image of three Chinstrap, Gentoo, and Adelie penguins.\"}\n:::\n\n::: {.column width=\"60%\"}\nA layer contains:\n\n::: incremental\n-   Data with aesthetic mapping\n\n-   A statistical transformation, or *stat*\n\n-   A geometric object, or *geom*\n\n-   A position adjustment\n:::\n:::\n:::\n\n# Mapping data to aesthetics\n\n## What data inputs are needed?\n\nData can be added to either the entire ggplot object or a particular layer.\n\nInput data must be a dataframe in 'tidy' format:\n\n::: incremental\n-   every column is a variable\n\n-   every row is an observation\n\n-   every cell is a single value\n:::\n\n::: callout-note\nSee [\"Tidy Data\"](https://vita.had.co.nz/papers/tidy-data.html) by Wickham (2014) and the associated [vignette](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)\n:::\n\n## Example dataset - raw\n\n\n::: {.cell}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|species   | bill_length_mm| bill_depth_mm| body_mass_g|\n|:---------|--------------:|-------------:|-----------:|\n|Adelie    |           39.1|          18.7|        3750|\n|Adelie    |           39.5|          17.4|        3800|\n|Gentoo    |           46.7|          15.3|        5200|\n|Gentoo    |           43.3|          13.4|        4400|\n|Chinstrap |           46.1|          18.2|        3250|\n|Chinstrap |           51.3|          18.2|        3750|\n\n</div>\n:::\n:::\n\n\n## Example dataset - mapped\n\n::: columns\n::: {.column width=\"40%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-5-1.png){width=384}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\naes(x = bill_length_mm,\n    y = bill_depth_mm,\n    size = body_mass_g,\n    color = species)\n```\n:::\n\n:::\n\n::: {.column width=\"60%\"}\nVariables mapped to aesthetic:\n\n\n::: {.cell}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|Color     |    x|    y| Size|\n|:---------|----:|----:|----:|\n|Adelie    | 39.1| 18.7| 3750|\n|Adelie    | 39.5| 17.4| 3800|\n|Gentoo    | 46.7| 15.3| 5200|\n|Gentoo    | 43.3| 13.4| 4400|\n|Chinstrap | 46.1| 18.2| 3250|\n|Chinstrap | 51.3| 18.2| 3750|\n\n</div>\n:::\n:::\n\n:::\n:::\n\n## Where to specify aesthetics?\n\n::: incremental\n-   Can be supplied to initial `ggplot()` call, in individual layers, or a combo\n\n-   `ggplot()` data and aesthetics are inherited, but can be overridden\n:::\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## Where to specify aesthetics?\n\n-   Can be supplied to initial `ggplot()` call, in individual layers, or a combo\n\n-   `ggplot()` data and aesthetics are inherited, but can be overridden\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm, \n                     color = species)) +\n  geom_point()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm)) +\n  geom_point(aes(color = species))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_point(data = penguins,\n             aes(x = body_mass_g, y = flipper_length_mm, color = species))\n```\n:::\n\n\n## Inheritance of aesthetics by layers {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = body_mass_g, \n                     y = flipper_length_mm, \n                     color = species)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) \n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-14-1.png){width=480}\n:::\n:::\n\n:::\n\n::: {.column width=\"\\\"50%\"}\n:::\n:::\n\n## Inheritance of aesthetics by layers {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = body_mass_g, \n                     y = flipper_length_mm, \n                     color = species)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) \n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-15-1.png){width=480}\n:::\n:::\n\n:::\n\n::: {.column width=\"\\\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = body_mass_g, \n                     y = flipper_length_mm)) +\n  geom_point(aes(color = species)) +\n  geom_smooth(method = \"lm\", \n              se = FALSE) \n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-16-1.png){width=480}\n:::\n:::\n\n:::\n:::\n\n## Mapping aesthetics to constants\n\nSpecifying a constant inside `aes()` with quotes creates a legend on the fly\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = body_mass_g,\n           color = species)) +\n  geom_point(aes(y = bill_length_mm, \n                 shape = \"Length\")) +\n  geom_point(aes(y = bill_depth_mm, \n                 shape = \"Depth\")) +\n  ylab(\"Bill dimensions (mm)\") +\n  labs(shape = \"dimension\")\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-18-1.png){width=480}\n:::\n:::\n\n:::\n:::\n\n# Customizing layers\n\n## Under the hood with `layer()`\n\n::: columns\n::: {.column width=\"60%\"}\nA layer contains:\n\n-   Data with aesthetic mapping\n\n-   A statistical transformation, or *stat*\n\n-   A geometric object, or *geom*\n\n-   A position adjustment\n:::\n\n::: {.column width=\"40%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_point()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  layer(mapping = NULL,\n        data = NULL,\n        geom = \"point\",\n        stat = \"identity\",\n        position = \"identity\")\n```\n:::\n\n:::\n:::\n\n::: callout-note\nAll `geom_*()` or `stat_*()` calls are customized shortcuts for the `layer()` function.\n:::\n\n## The expediency of defaults\n\n::: columns\n::: {.column width=\"50%\"}\n::: incremental\n-   Defining each of the components of a layer or whole graphic can be tiresome\n\n-   `ggplot2` has a hierarchy of defaults\n\n-   So you can make a graph in 2 lines of code!\n:::\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-21-1.png){width=480}\n:::\n:::\n\n:::\n:::\n\n## The short way and the long way\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_point(data = penguins,\n             mapping = aes(x = body_mass_g,\n                           y = flipper_length_mm))\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-23-1.png){width=480}\n:::\n:::\n\n:::\n:::\n\n## The short way and the long way\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_point(data = penguins,\n             mapping = aes(x = body_mass_g,\n                           y = flipper_length_mm))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  layer(data = penguins,\n        mapping = aes(\n          x = body_mass_g,\n          y = flipper_length_mm),\n        geom = \"point\", \n        stat = \"identity\",\n        position = \"identity\") +\n  scale_x_continuous() +\n  scale_y_continuous() +\n  coord_cartesian()\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-26-1.png){width=480}\n:::\n:::\n\n:::\n:::\n\n## `stat_*` vs. `geom_*`\n\n\"Every geom has a default statistic, and every statistic has a default geom.\" - Wickham (2010)\n\n::: incremental\n-   `stat_*` transforms the data\n    -   By computing or summarizing from original input dataset\n    -   Returns a new dataset that can be mapped to aesthetics\n-   `geom_*` control the type of plot rendered\n:::\n\n::: {.callout-tip collapse=\"true\"}\nWhen in doubt, check the [documentation](https://ggplot2.tidyverse.org/reference/index.html)\n:::\n\n## Two ways to plot counts (categorical)\n\n`stat_count()` and `geom_bar()` are equivalent\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, \n       mapping = aes(x = species, \n                     fill = sex)) +\n  stat_count()\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-27-1.png){width=480}\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, \n       mapping = aes(x = species, \n                     fill = sex)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-28-1.png){width=480}\n:::\n:::\n\n:::\n:::\n\n## Two ways to plot density (continuous)\n\n`stat_density()` and `geom_density()` are not equivalent\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, \n       mapping = aes(x = body_mass_g, \n                     fill = species)) +\n  stat_density(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-29-1.png){width=480}\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, \n       mapping = aes(x = body_mass_g, \n                     fill = species)) +\n  geom_density(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-30-1.png){width=480}\n:::\n:::\n\n:::\n:::\n\n## When to use which? {.smaller}\n\nIn general, use `geom_*()` unless you are trying to:\n\n::: panel-tabset\n### Override\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  count(species) %>%\n  ggplot(aes(x = species, y = n)) +\n  geom_bar(stat = \"identity\")\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-32-1.png){width=480}\n:::\n:::\n\n:::\n:::\n\n### Customize\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = species, \n                     y = after_stat(prop),\n                     group = 1)) +\n  geom_bar()\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-34-1.png){width=480}\n:::\n:::\n\n:::\n:::\n\n### Summarize\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins) +\n  stat_summary(aes(x = species,\n                   y = body_mass_g),\n               fun.min = min,\n               fun.max = max,\n               fun = mean)\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-36-1.png){width=480}\n:::\n:::\n\n:::\n:::\n:::\n\n## A panopoly of layer options!\n\nTrack all [geom](https://ggplot2-book.org/layers.html#sec-geom) and [stat](https://ggplot2-book.org/layers.html#sec-stat) options\n\n::: callout-tip\n## Exercise\n\nFor each of the following problems, suggest a useful geom:\n\n1.  Display how a variable has changed over time\n2.  Show the detailed distribution of a single variable\n3.  Focus attention on one portion of a large dataset\n4.  Draw a map\n5.  Label outlying points\n:::\n\n## Position adjustment options\n\n::: panel-tabset\n### stack\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = penguins, mapping = aes(x = species, fill = sex)) +\n  geom_bar(position = \"stack\")\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-37-1.png){fig-align='center' width=480}\n:::\n:::\n\n\n### fill\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = penguins, mapping = aes(x = species, fill = sex)) +\n  geom_bar(position = \"fill\")\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-38-1.png){fig-align='center' width=480}\n:::\n:::\n\n\n### dodge\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = penguins, mapping = aes(x = species, \n                     fill = sex)) +\n  geom_bar(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-39-1.png){fig-align='center' width=480}\n:::\n:::\n\n:::\n\n## Position adjustment options\n\n::: panel-tabset\n### identity\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = penguins, mapping = aes(x = species, y = body_mass_g, color = sex)) +\n  geom_point(position = \"identity\")\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-40-1.png){fig-align='center' width=480}\n:::\n:::\n\n\n### jitter\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = penguins, mapping = aes(x = species, y = body_mass_g, color = sex)) +\n  geom_point(position = \"jitter\")\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-41-1.png){fig-align='center' width=480}\n:::\n:::\n\n\n### jitterdodge\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = penguins, mapping = aes(x = species, y = body_mass_g, color = sex)) +\n  geom_point(position = position_jitterdodge())\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-42-1.png){fig-align='center' width=480}\n:::\n:::\n\n:::\n\n## Position adjustments limitations\n\nFor example, boxplots and errorbars can't be stacked.\n\n::: callout-tip\n## Exercise\n\n-   What properties must a geom possess to be stackable?\n\n-   What properties must a geom possess to be dodgeable?\n:::\n\n# Code-along exercise\n\n## Recreating a layered plot\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-43-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n::: callout-tip\n## Exercise\n\nWhat are the two layers in this plot?\nWhat data when into each?\n:::\n\n# Adjusting visual elements\n\n## Scales and guides\n\n::: incremental\n-   Each scale is a function that translate data space (in data units) into aesthetic space (e.g., pixels)\n\n-   A guide (axis or legend) is the inverse function, that converts visual properties back to data\n:::\n\n## Scales and guides\n\n-   Each scale is a function that translate data space (in data units) into aesthetic space (e.g., pixels)\n\n-   A guide (axis or legend) is the inverse function, that converts visual properties back to data\n\n![Are axes and legends equivalent?](img/scale-guides.png){width=\"700\" fig-align=\"center\" fig-alt=\"Labeled ggplot figure indicating similarity between axes and legends\"}\n\n## Scale specification\n\nEvery aesthetic in a plot is associated with exactly one scale.\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = body_mass_g,\n           y = flipper_length_mm)) +\n  geom_point(aes(color = species))\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = body_mass_g,\n           y = flipper_length_mm)) +\n  geom_point(aes(color = species)) +\n  scale_x_continuous() + \n  scale_y_continuous() + \n  scale_colour_discrete()\n```\n:::\n\n:::\n:::\n\nScale functions names are made of 3 pieces separated by \"\\_\":\n\n::: incremental\n1.  `scale`\n\n2.  the name of the primary aesthetic (`color`, `shape`, `x`)\n\n3.  the name of the scale (`discrete`, `continuous`, `brewer`)\n:::\n\n## What does a coordinate system do?\n\nCoordinate systems have 2 primary roles:\n\n::: incremental\n1.  Combine the `x` and `y` position aesthetics to produce a 2-dimensional position on the plot\n\n2.  In coordination with faceting (optional), draw axes and panel backgrounds\n:::\n\n## Types of coordinate systems {.smaller}\n\n::: columns\n::: {.column width=\"40%\"}\nLinear:\n\n-   `coord_cartesian()`: common default\n\n-   `coord_flip()`: x and y axes flipped\n\n-   `coord_fixed()`: fixed aspect ratio\n:::\n\n::: {.column width=\"5%\"}\n:::\n\n::: {.column width=\"55%\"}\nNon-linear:\n\n::: incremental\n-   `coord_map()`/`coord_quickmap()`/`coord_sf()`: map projections, `x` and `y` become longitude and latitude\n\n-   `coord_polar()`: polar coordinates, `x` and `y` become angle and radius\n\n-   `coord_trans()`: apply transformations\n:::\n:::\n:::\n\n## Faceting\n\nCreates small multiples to show different subsets:\n\n-   `facet_null()`: default\n\n-   `facet_wrap()`: \"wraps\" a 1d ribbon of panels into 2d\n\n-   `facet_grid()`: 2d grid of panels defined by row and column\n\n![](img/position-facets.png){width=\"500\" fig-align=\"center\" fig-alt=\"Comparison of facet_wrap and facet_grid organization \"}\n\n## Keeping points of reference\n\n::: callout-tip\n## Exercise\n\nRecreate the figure below.\nHow would you get the gray points to show up on all facets?\n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-46-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Theming\n\nControls non-data elements of plots (e.g., to match a style guide).\n\n::: incremental\n1.  Theme <b>elements</b> specify the non-data [elements](https://ggplot2.tidyverse.org/reference/theme.html) you can control: `plot.title`, `legend.position`\n\n2.  Each element has an <b>element function</b> to describe its visual properties: `element_text()`, `element_blank()`\n\n3.  The `theme()` function allows overriding of the default theme: `theme(legend.title = element_blank())`\n:::\n\n## Complete themes\n\n::: panel-tabset\n### theme_bw()\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = body_mass_g,\n           y = flipper_length_mm)) +\n  geom_point(aes(color = species)) +\n  theme_bw()\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-48-1.png){fig-align='center' width=480}\n:::\n:::\n\n:::\n:::\n\n### theme_minimal()\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = body_mass_g,\n           y = flipper_length_mm)) +\n  geom_point(aes(color = species)) +\n  theme_minimal()\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-50-1.png){fig-align='center' width=480}\n:::\n:::\n\n:::\n:::\n\n### theme_classic()\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = body_mass_g,\n           y = flipper_length_mm)) +\n  geom_point(aes(color = species)) +\n  theme_classic()\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-52-1.png){fig-align='center' width=480}\n:::\n:::\n\n:::\n:::\n:::\n\n## Further resources\n\n::: incremental\n-   Penguin artwork by @allison_horst\n\n-   Hadley Wickham's \"A layered grammar of graphics\" (2010)\n\n-   Hadley Wickham's \"ggplot2: Elegant Graphics for Data Analysis, 3rd edition\", now available [online](https://ggplot2-book.org/)\n\n-   \"R for Data Science\", by Hadley Wickham, Mine Cetinkaya-Rundel, & Garret Grolemund, especially chapters [2](https://r4ds.hadley.nz/data-visualize.html), [10](https://r4ds.hadley.nz/layers.html), and [12](https://r4ds.hadley.nz/communication.html)\n\n-   See us at [drop-in hours](https://datascience.cct.arizona.edu/drop-in-hours)\n:::\n",
    "supporting": [
      "slides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}