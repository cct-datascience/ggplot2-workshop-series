{
  "hash": "825756c2da14c5b2820e6580df85678e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Foundations of {ggplot2}\nauthor: Eric R. Scott\nformat: \n  uaz-revealjs:\n  # revealjs:\n    incremental: true\ncss: custom.css\nbibliography: references.bib\n---\n\n\n## Learning Objectives\n\n\n\n\n\n-   Understand the \"grammar of graphics\" and how it inspired `ggplot2`'s design\n-   Know what it means to \"map data to aesthetics\"\n-   Learn to plot different data sets on the same visualization\n-   Understand the relationship between a \"geom\" and a \"stat\"\n-   Learn to customize scales and guides\n\n------------------------------------------------------------------------\n\n![](https://media.springernature.com/w316/springer-static/cover-hires/book/978-0-387-28695-2?as=webp){fig-align=\"center\"}\n\n## A Grammar of Graphics\n\n-   A book by @wilkinson2005\n-   Inspired the development of *many* graphics programs including `ggplot2` [@wickham2010]\n-   Alternative to having a function for every kind of plot\n-   A framework for layering elements to create any kind of plot\n\n## Grammar of Graphics Components\n\n\n\n\n\n::: columns\n::: {.column width=\"50%\"}\n::: nonincremental\n1.  Data\n2.  Aesthetics\n3.  Scales (and guides)\n4.  Geometric objects\n5.  Statistics\n6.  Facets\n7.  Coordinate system\n:::\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-3-1.png){width=432}\n:::\n:::\n\n:::\n:::\n\n::: notes\nWe're going to go through each of these and examine how they appear in this example plot\n:::\n\n## Data\n\n::: columns\n::: {.column width=\"50%\"}\nObservations and variables to be visualized.\n\nWhat data is being visualized?\n\n-   Body mass measured in grams\n\n-   Bill length measured in mm\n\n-   Island and species categories\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-4-1.png){width=432}\n:::\n:::\n\n:::\n:::\n\n## Aesthetics\n\n::: columns\n::: {.column width=\"50%\"}\nVisual elements (color, shape, position, size, etc.) used to encode data.\n\nWhat aesthetics are used to encode these data?\n\n-   Color\n\n-   x position\n\n-   y position\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-5-1.png){width=432}\n:::\n:::\n\n:::\n:::\n\n## Scales (and guides)\n\n::: columns\n::: {.column width=\"50%\"}\nScales translate data units into visual units, guides translate visual units back to data units.\n\nWhat scales are used?\n\n-   Continuous and linear x and y axes (scales)\n\n<!-- -->\n\n-   Discrete (categorical) color scale\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-6-1.png){width=432}\n:::\n:::\n\n:::\n:::\n\n::: notes\nScale translates data units (e.g. grams) into visual units (pixels).\nGuides translate visual units (e.g. color hue) back to data units (species category).\nWalk through this with annotations.\n:::\n\n## Geometric Objects (\"geoms\")\n\n::: columns\n::: {.column width=\"50%\"}\nObjects, often having multiple aesthetics, that represent data visually.\n\nWhat geometric objects are used?\n\n-   Data is represented using circles/points\n-   Trend is represented as a line\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-7-1.png){width=432}\n:::\n:::\n\n:::\n:::\n\n::: notes\nBoth aesthetics and geoms are related to the visual representation of data.\nTo distinguish aesthetics and geoms, think about how geoms can have *many* aesthetics.\nE.g. points have position, shape, size, color, and transparency and different data could be mapped to each of those aesthetics.\n:::\n\n## Statistics (\"stats\")\n\n::: columns\n::: {.column width=\"50%\"}\nAny calculations or transformations needed to summarize the data to plot it.\n\nWhat \"stats\" are used?\n\n-   For points, none (stat = \"identity\")\n\n-   For trend lines, linear regression\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-8-1.png){width=432}\n:::\n:::\n\n:::\n:::\n\n## Facets\n\n::: columns\n::: {.column width=\"50%\"}\nPlots can be split into small multiples or \"facets\" by a variable.\n\nWhat is the faceting variable?\n\n-   Faceted by island\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-9-1.png){width=432}\n:::\n:::\n\n:::\n:::\n\n::: notes\nNot every plot has facets.\nPlots can be faceted by multiple (2) variables in a grid\n:::\n\n## Coordinate System\n\n::: columns\n::: {.column width=\"50%\"}\nHow spatial positions are represented on paper (or screen)—e.g.\nmap projections.\n\nWhat coordinate system is used?\n\n-   Cartesian coordinates\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-10-1.png){width=432}\n:::\n:::\n\n:::\n:::\n\n::: notes\nOther options include polar coordinates or the many possible coordinate systems used in maps.\n:::\n\n## Practice\n\nIdentify each of the seven components of this plot\n\n::: columns\n::: {.column width=\"50%\"}\n::: nonincremental\n1.  Data\n2.  Aesthetics\n3.  Scales\n4.  Geometric Objects\n5.  Statistics\n6.  Facets\n7.  Coordinate System\n:::\n:::\n\n::: {.column width=\"50%\"}\n[![](https://s3.eu-west-1.amazonaws.com/static.gapminder.org/GapminderMedia/wp-uploads/20161215191134/countries_health_wealth_2016_v13.jpg){fig-align=\"center\"}](https://www.gapminder.org/tag/chart/)\n:::\n:::\n\n## Break ⏰\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_974e8323\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;left:0;font-size:5em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n# `ggplot2` and the Grammar of Graphics\n\n::: notes\nNow we're going to go through each of the seven components and see some examples of how they are implemented in `ggplot2`\n:::\n\n## Data\n\n::: nonincremental\n-   Data is *inherited* by default, but can be overridden for specific layers\n\n-   Worked example: jitter plot of raw data with mean ± standard deviation\n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-12-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n##  {.smaller}\n\n::: r-stack\n::: fragment\n\n::: {.cell .output6040 output-location='column'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\npeng_summary <- \n  penguins |> \n  group_by(island) |> \n  summarize(\n    mean_mass = mean(body_mass_g, na.rm = TRUE),\n    lower_sd = mean_mass - sd(body_mass_g, na.rm = TRUE),\n    upper_sd = mean_mass + sd(body_mass_g, na.rm = TRUE)\n  )\npeng_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  island    mean_mass lower_sd upper_sd\n  <fct>         <dbl>    <dbl>    <dbl>\n1 Biscoe        4716.    3933.    5499.\n2 Dream         3713.    3296.    4130.\n3 Torgersen     3706.    3261.    4151.\n```\n\n\n:::\n:::\n\n:::\n\n::: fragment\n\n::: {.cell .output6040 output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"15\"}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\npeng_summary <- \n  penguins |> \n  group_by(island) |> \n  summarize(\n    mean_mass = mean(body_mass_g, na.rm = TRUE),\n    lower_sd = mean_mass - sd(body_mass_g, na.rm = TRUE),\n    upper_sd = mean_mass + sd(body_mass_g, na.rm = TRUE)\n  )\n# peng_summary\n\nset.seed(123)\nggplot(penguins, aes(x = island, y = body_mass_g)) \n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-14-1.png){width=432}\n:::\n:::\n\n:::\n\n::: fragment\n\n::: {.cell .output6040 output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"15-16\"}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\npeng_summary <- \n  penguins |> \n  group_by(island) |> \n  summarize(\n    mean_mass = mean(body_mass_g, na.rm = TRUE),\n    lower_sd = mean_mass - sd(body_mass_g, na.rm = TRUE),\n    upper_sd = mean_mass + sd(body_mass_g, na.rm = TRUE)\n  )\n# peng_summary\n\nset.seed(123)\nggplot(penguins, aes(x = island, y = body_mass_g)) +\n  geom_jitter(alpha = 0.4)\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-15-1.png){width=432}\n:::\n:::\n\n:::\n\n::: fragment\n\n::: {.cell .output6040 output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"17-22|18|19|\"}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\npeng_summary <- \n  penguins |> \n  group_by(island) |> \n  summarize(\n    mean_mass = mean(body_mass_g, na.rm = TRUE),\n    lower_sd = mean_mass - sd(body_mass_g, na.rm = TRUE),\n    upper_sd = mean_mass + sd(body_mass_g, na.rm = TRUE)\n  )\n# peng_summary\n\nset.seed(123)\nggplot(penguins, aes(x = island, y = body_mass_g)) +\n  geom_jitter(alpha = 0.4) +\n  geom_pointrange(\n    data = peng_summary,\n    aes(y = mean_mass, ymin = lower_sd, ymax = upper_sd),\n    shape = \"square\",\n    color = \"blue\"\n  )\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-16-1.png){width=432}\n:::\n:::\n\n:::\n:::\n\n::: notes\nStart by summarizing the `penguins` dataset to get some summary statistics for the error bars.\nNotice that `ggplot()` uses the raw data though.\\\n\n\\\nThen add the raw data points, in this case with `geom_jitter()`\\\n\\\nThen add the `geom_pointrange()`.\nNotice that we override the inherited data with `data = peng_summary` .\nThe `x` mapping is inherited, but we need to supply new aesthetic mappings for `y`, `ymin`, and `ymax`\n:::\n\n## Aesthetics\n\n::: nonicremental\n-   Aesthetics are *inherited* when placed in `ggplot()` but can also be specified per layer\n-   Aesthetics can be mapped to data or set as constant\n-   All the aesthetics and their possible values: <https://ggplot2.tidyverse.org/articles/ggplot2-specs.html>\n-   Worked example: box plot for each island layered ontop of jitter plot for each island x sex combination.\n:::\n\n::: notes\nThis might be a good place to look through help files and figure out which aesthetics are valid for mapping\n:::\n\n##  {.smaller}\n\nAesthetic mappings supplied to `ggplot2()` are inherited by all layers\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"1|\"}\nggplot(penguins, aes(x = island, y = body_mass_g, color = sex)) +\n  geom_boxplot() +\n  geom_jitter() \n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-17-1.png){width=960}\n:::\n:::\n\n\n##  {.smaller}\n\nMappings supplied to a geom only affect that geom.\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"1,3|\"}\nggplot(penguins, aes(x = island, y = body_mass_g)) +\n  geom_boxplot() +\n  geom_jitter(aes(color = sex))\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-18-1.png){width=960}\n:::\n:::\n\n\n##  {.smaller}\n\nTurn off inheritance from `ggplot()` for individual geoms with `inherit.aes = FALSE`.\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"2|\"}\nggplot(penguins, aes(x = island, y = body_mass_g, color = sex)) +\n  geom_boxplot(aes(x = island, y = body_mass_g), inherit.aes = FALSE) +\n  geom_jitter()\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n\n##  {.smaller}\n\nSetting an aesthetic (rather than mapping to data with `aes()`)\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"2-3|\"}\nggplot(penguins, aes(x = island, y = body_mass_g, color = sex)) +\n  geom_boxplot(color = \"black\") +\n  geom_jitter(color = \"darkred\")\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\n## Scales\n\n-   `scale_` functions effect the range (limits) and breaks of scales and the labels and appearance of corresponding guides.\n-   Worked example: 1) re-order and re-color a discrete color scale, 2) change the number of breaks on the x-axis\n\n##  {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|3|4-8|9\"}\np + \n  scale_color_manual(\n    name = \"Species\",\n    values = c(\n      \"Adelie\" = \"#7570b3\",\n      \"Chinstrap\" = \"#d95f02\",\n      \"Gentoo\" = \"#1b9e77\"\n    ),\n    breaks = c(\"Gentoo\", \"Chinstrap\", \"Adelie\")\n  )\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-21-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n::: notes\n`values` takes a named vector and is used to assign a color (hex code or color name) to each level of the variable.\n`breaks` changes the order.\n:::\n\n##  {.smaller}\n\n*About* 10 breaks at \"pretty\" values:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np +\n  scale_x_continuous(\n    name = \"Bill Length (mm)\",\n    n.breaks = 10\n  )\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-22-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n##  {.smaller}\n\nBreaks at *exactly* a sequence of values:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np + \n  scale_x_continuous(\n    name = \"Bill Length (mm)\",\n    breaks = seq(from = 2000, to = 7000, by = 303) \n  )\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-23-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Geoms\n\n-   Every geom has a default stat, but it can be overridden\n-   Not all geoms use the same aesthetics\n-   Worked example: explore the anatomy of a help file (e.g. `?geom_point()`)\n    -   How can you determine the default stat for a geom?\n    -   How can you find out what aesthetics a geom has?\n\n##  {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf <- expand_grid(x = LETTERS[1:5], y = 1:5)\nggplot(df) +\n  geom_point(aes(x = x, y = y, \n        color = x, shape = x,\n        size = y, alpha = y, stroke = y))\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-24-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n::: callout-caution\nWith great power, comes great responsibility!\nIt's not always a *good idea* to map data to aesthetics just because you can.\nStay tuned for part 2 of this series for more!\n:::\n\n## Stats\n\n<!-- NOTE: an alternative to this would be to talk about how the stats of some geoms (e.g. geom_histogram()) actually return multiple values that you can select from with `after_stat()`.  Maybe that is more useful? -->\n\n-   Every stat has a default geom and you *usually* use the `geom_*()` function\n-   Some stats *don't* have an equivalent geom\n-   Worked example: adding mean ± SD on top of jitter plot with `stat_summary()`\n\n## `stat_summary()` key arguments {.smaller}\n\n`fun.data`—A function that is given the complete data and should return a data frame with variables ymin, y, and ymax.\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_sdl(rnorm(100), mult = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           y       ymin      ymax\n1 0.06073364 -0.8481342 0.9696015\n```\n\n\n:::\n:::\n\n\n. . .\n\n`fun.args`—list of arguments to function in `fun.data` (optional); `mult` multiplies the standard deviation\n\n. . .\n\n`geom`—default is `\"pointrange\"`, but could be anything that uses `y`, `ymin` and `ymax` aesthetic mappings\n\n##  {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|4-9|5|6|\"}\nset.seed(123)\nggplot(penguins, aes(x = island, y = body_mass_g)) +\n  geom_jitter(alpha = 0.4) +\n  stat_summary(\n    fun.data = \"mean_sdl\",\n    fun.args = list(mult = 1),\n    color = \"blue\",\n    shape = \"square\"\n  )\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-26-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Use your own function {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|1-3|6\"}\nmedian_80 <- function(vals) {\n   tibble(y = median(vals, na.rm = TRUE), ymin = quantile(vals, 0.1), ymax = quantile(vals, 0.9))\n}\nggplot(penguins, aes(x = island, y = body_mass_g)) +\n  geom_jitter(alpha = 0.4) +\n  stat_summary(fun.data = \"median_80\")\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-27-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n##  {.smaller}\n\n<!-- alternative worked example for `stat`.  I am leaning toward this one because it is simpler-->\nSome \"stats\" calculate multiple values available with `after_stat()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins) +\n  geom_histogram(aes(x = body_mass_g)) +\n  facet_wrap(vars(island))\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-28-1.png){width=960}\n:::\n:::\n\n\n::: notes\nNotice there are just fewer observations on Torgersen island.\nThis could make it difficult to compare if you are mainly interested in comparing the *distribution* of body size across islands.\n:::\n\n##  {.smaller}\n\nUse `after_stat(density)` to make it easier to compare distributions with different total n.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins) +\n  geom_histogram(aes(x = body_mass_g, y = after_stat(density))) +\n  facet_wrap(vars(island))\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-29-1.png){width=960}\n:::\n:::\n\n\n::: notes\n`after_stat(density)` makes the bars in each facet integrate to 1, so they now show *relative* distribution of body mass.\n:::\n\n## Facets\n\n-   Implemented with `facet_wrap()` and `facet_grid()`\n-   Facets will be explored more in part 2 of this series\n\n## Coords\n\n-   Adjusting x and y limits with `coord_cartesian()` is different than adjusting limits in a scale\n-   `coord_polar()` for polar data, `coord_sf()` for maps\n-   Worked example: zooming in on data\n\n##  {.smaller}\n\nSetting axis limits in `scale_x_continuous()` *removes* data that is out of range\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np + scale_x_continuous(limits = c(4000, 5000))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 222 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 222 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-30-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n::: notes\nImportantly, notice that the best-fit line from `geom_smooth()` is now *only* considering the points between 4000 and 5000 g body mass!\n:::\n\n## {.smaller}\n\nSetting axis limits in `coord_cartesian()` simply *zooms in*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np + coord_cartesian(xlim = c(4000, 5000))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-31-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n::: notes\nNotice that points whose centers are < 4000 or > 5000 still show up\n:::\n\n<!-- TODO: add boilerplate wrap-up slide -->\n\n## References\n\n::: refs\n:::\n",
    "supporting": [
      "slides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}