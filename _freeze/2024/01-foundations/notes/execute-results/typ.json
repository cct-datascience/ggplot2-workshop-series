{
  "hash": "c28d48e218cfda4e3dac31db16205984",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Notes for foundations of ggplot2\nauthor: Eric Scott\ndate: 2024-06-06\nformat: \n  html:\n    toc: true\n  typst: default\nexecute: \n  echo: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\ntheme_set(theme_bw())\n```\n:::\n\n\n\n## Data\n\nThis is the plot we're trying to re-create:\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-2-1.svg)\n:::\n:::\n\n\n\nWhat geom can we use for error bars?  Type `geom_` and hit tab to see a list of all possible `geom_` functions.  `geom_errorbar()` sounds about right!  What data do we need to plot an error bar?  View the help file with `?geom_errorbar` and check the \"Aesthetics\" section.  Looks like we need x (island), ymin, and ymax.\n\n\nLet's start by summarizing the data to calculate a mean and standard deviation for each island.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npeng_summary <- \n  penguins |> \n  group_by(island) |> #for each island...\n  summarize(\n    mean_mass = mean(body_mass_g, na.rm = TRUE),\n    sd = sd(body_mass_g, na.rm = TRUE)\n  )\npeng_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  island    mean_mass    sd\n  <fct>         <dbl> <dbl>\n1 Biscoe        4716.  783.\n2 Dream         3713.  417.\n3 Torgersen     3706.  445.\n```\n\n\n:::\n:::\n\n\n\nThen let's get values for the lower and upper parts of the error bars.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npeng_summary <-\n  peng_summary |> \n  mutate(lower = mean_mass - sd, upper = mean_mass + sd)\npeng_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 5\n  island    mean_mass    sd lower upper\n  <fct>         <dbl> <dbl> <dbl> <dbl>\n1 Biscoe        4716.  783. 3933. 5499.\n2 Dream         3713.  417. 3296. 4130.\n3 Torgersen     3706.  445. 3261. 4151.\n```\n\n\n:::\n:::\n\n\n\nNow we can plot the error bars and means.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(peng_summary, aes(x = island)) +\n  #mean:\n  geom_point(aes(y = mean_mass)) +\n  #sd:\n  geom_errorbar(aes(ymin = lower, ymax = upper))\n```\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-5-1.svg)\n:::\n:::\n\n\n\nLet's do some tweaking to make this look more appealing\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(peng_summary, aes(x = island)) +\n  #mean:\n  geom_point(\n    aes(y = mean_mass),\n    shape = \"square\",\n    color = \"blue\",\n    size = 2.5\n  )+\n  #sd:\n  geom_errorbar(\n    data = peng_summary,\n    aes(ymin = lower, ymax = upper),\n    width = 0.1,\n    color = \"blue\"\n  ) \n```\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-6-1.svg)\n:::\n:::\n\n\n\nNow we can add the raw data using `geom_jitter()` by overriding the `data` argument.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(peng_summary, aes(x = island)) +\n  #mean:\n  geom_point(\n    aes(y = mean_mass),\n    shape = \"square\",\n    color = \"blue\",\n    size = 2.5\n  )+\n  #sd:\n  geom_errorbar(\n    data = peng_summary,\n    aes(ymin = lower, ymax = upper),\n    width = 0.1,\n    color = \"blue\"\n  ) +\n  #add raw data:\n  geom_jitter(\n    data = penguins, #override data to use penguins instead of peng_summary\n    aes(y = body_mass_g),\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-7-1.svg)\n:::\n:::\n\n\n\nAnd finally we can do some tweaking of the jitter layer\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(peng_summary, aes(x = island)) +\n  #mean:\n  geom_point(\n    aes(y = mean_mass),\n    shape = \"square\",\n    color = \"blue\",\n    size = 2.5\n  )+\n  #sd:\n  geom_errorbar(\n    data = peng_summary,\n    aes(ymin = lower, ymax = upper),\n    width = 0.1,\n    color = \"blue\"\n  ) +\n  #add raw data:\n  geom_jitter(\n    data = penguins, #override data to use penguins instead of peng_summary\n    aes(y = body_mass_g),\n    alpha = 0.4, #add transparency\n    height = 0 #don't jitter vertically, only horizontally\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-8-1.svg)\n:::\n:::\n\n\n\n\n## Aesthetics\n\nLet's use a boxplot on top of the jitter plot and have the points colored by sex but not the box plots\n\nWhen `color = sex` is in the `aes()` call in `ggplot()`, this aesthetic mapping is inherited by all geoms.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = island, y = body_mass_g, color = sex)) +\n  geom_boxplot() +\n  geom_jitter()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-9-1.svg)\n:::\n:::\n\n\n\nIf we want to map sex to color only for the jitter layer, we can remove it from `ggplot()` and add it to `geom_jitter()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = island, y = body_mass_g)) +\n  geom_boxplot() +\n  geom_jitter(aes(color = sex))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-10-1.svg)\n:::\n:::\n\n\n\nOr, we can use `inherit.aes = FALSE` and specify *all* the aesthetic mappings for the boxplot layer.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = island, y = body_mass_g, color = sex)) +\n  geom_boxplot(aes(x = island, y = body_mass_g), inherit.aes = FALSE) +\n  geom_jitter()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-11-1.svg)\n:::\n:::\n\n\n\nIf you set aesthetic mappings to constants, it overrides the mappings to data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = island, y = body_mass_g, color = sex)) +\n  geom_boxplot(color = \"darkgreen\") +\n  geom_jitter()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-12-1.svg)\n:::\n:::\n\n\n\n\n## Scales\n\nHere's the original plot, saved as `p`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- \n  ggplot(penguins |> drop_na(), aes(x = body_mass_g, y = bill_length_mm, color = species)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  facet_wrap(vars(island), ncol = 1)\np\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-13-1.svg)\n:::\n:::\n\n\n\nAnd here's what it's going to end up like after modifying scales:\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-14-1.svg)\n:::\n:::\n\n\n\nFirst, let's address the color scale.  Two changes need to happen: custom colors, and a re-ordering of the species in the legend. `scale_color_manual()` can take care of both.\n\nWe can supply whatever colors we want with a named vector where the names correspond to levels of the `species` variable that is mapped to color.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_cols <- c(\n  \"Adelie\" = \"#7570b3\",\n  \"Chinstrap\" = \"#d95f02\",\n  \"Gentoo\" = \"#1b9e77\"\n)\n```\n:::\n\n\n\nThese are hex-codes, but you can also used named colors in R.\n\nSupply that named vector to the `values` argument.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np +\n  scale_color_manual(\n    name = \"Species\",\n    values = my_cols\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-16-1.svg)\n:::\n:::\n\n\n\nThe re-ordering happens with the `breaks` argument like so:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_new <- p +\n  scale_color_manual(\n    name = \"Species\",\n    values = my_cols,\n    breaks = c(\"Gentoo\", \"Chinstrap\", \"Adelie\")\n  )\np_new\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-17-1.svg)\n:::\n:::\n\n\n\nNow we can move on to the x and y axes.  For the x-axis, let's increase the number of breaks to *about* 10.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_new +\n  scale_x_continuous(n.breaks = 10)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-18-1.svg)\n:::\n:::\n\n\n\nAnd we can supply *exact* breaks to the y-axis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_new +\n  scale_x_continuous(n.breaks = 10) +\n  scale_y_continuous(breaks = seq(from = 30, to = 65, by = 5.5))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-19-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = island, y = body_mass_g)) +\n  geom_jitter(alpha = 0.4, height = 0) +\n  stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1),\n               color = \"blue\", shape = \"square\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_summary()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-20-1.svg)\n:::\n:::\n\n\n\nYou can also use `scale_x_log10()` to create breaks for a log scale\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np + scale_x_continuous(n.breaks = 15)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-21-1.svg)\n:::\n\n```{.r .cell-code}\np + scale_x_log10(n.breaks = 15)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-21-2.svg)\n:::\n:::\n\n\n\n\n## Geoms\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- expand_grid(x = LETTERS[1:5], y = 1:5)\nggplot(df) +\n  geom_point(aes(x = x, y = y, \n        color = x, shape = x,\n        size = y, alpha = y, stroke = y))\n```\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-22-1.svg)\n:::\n:::\n\n\n\n## Stats\n\n### `stat_summary()`\n\n`stat_summary()` calculates some summary statistics as `y`, `ymin`, and `ymax` (and possibly other aesthetic mappings) and supplies them to a geom (default = \"pointrange\").  This is a shortcut for doing the sort of plot we did in the \"Data\" section without having to create a separate dataset.\n\nFirst, let's see what the default looks like:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = island, y = body_mass_g)) +\n  stat_summary()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_summary()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNo summary function supplied, defaulting to `mean_se()`\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-23-1.svg)\n:::\n:::\n\n\nAs you can see in the warning, by default it is plotting mean ± SE (standard error) with the `mean_se()` function.  To instead plot mean ± SD we can either create our own function or use `mean_sdl()` and change it's `mult` argument from the default `2` which doubles the SD.\n\nLet's see what `mean_sdl()` does on its own:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_sdl(rnorm(100), mult = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           y      ymin      ymax\n1 -0.1080539 -1.157794 0.9416861\n```\n\n\n:::\n:::\n\n\nIt creates a tibble with the columns y, ymin, and ymax.  Any function that does this will work with `stat_summary()` by supplying it to the `fun.data` argument.  To pass along the `mult` argument, we have to use the `fun.args` argument.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = island, y = body_mass_g)) +\n  stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_summary()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-25-1.svg)\n:::\n:::\n\n\n\nNow we can add our data!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = island, y = body_mass_g)) +\n  geom_jitter(alpha = 0.4, height = 0) +\n  stat_summary(fun.data = \"mean_sdl\", fun.args = list(mult = 1),\n               color = \"blue\", shape = \"square\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_summary()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-26-1.svg)\n:::\n:::\n\n\n\nWe could instead use our own custom function that plots the median and the middle 80% of data points, for example.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedian_80 <- function(vals) {\n   tibble(y = median(vals, na.rm = TRUE),\n          ymin = quantile(vals, 0.1),\n          ymax = quantile(vals, 0.9))\n}\nggplot(penguins, aes(x = island, y = body_mass_g)) +\n  geom_jitter(alpha = 0.4, height = 0) +\n  stat_summary(fun.data = \"median_80\", color = \"blue\", shape = \"square\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_summary()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-27-1.svg)\n:::\n:::\n\n\n\n\n### Binned density plot with `geom_histogram()` and `after_stat()`\n\nSome \"stats\" calculate multiple values available with `after_stat()`.  For example, `geom_histogram()` uses the count variable calculated by `stat_bin()` to plot the number of data points in each bit on the y-axis. \n\nHere's a histogram of body mass faceted by island:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins) +\n  geom_histogram(aes(x = body_mass_g)) +\n  facet_wrap(vars(island))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_bin()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-28-1.svg)\n:::\n:::\n\n\n\nTorgersen island clearly just has fewer penguins, making it somewhat difficult to compare the relative *distribution* of body mass among the islands.\n\nIn the \"Computed variables\" section of `?stat_bin()` you see that it also calculates `density`, `ncount`, `ndensity`, and `width`.  We can plot density of points rather than count using `after_stat(density)`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins) +\n  geom_histogram(aes(x = body_mass_g, y = after_stat(density))) +\n  facet_wrap(vars(island))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_bin()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-29-1.svg)\n:::\n:::\n\n\n\nNow the bars for each island add up to 1, taking sample size out of the equation.\n\n## Facets\n\n`facet_wrap()` facets by a single variable\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = body_mass_g, y = bill_length_mm)) +\n  facet_wrap(vars(island)) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-30-1.svg)\n:::\n:::\n\n\n\n`facet_grid()` facets by two variables\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = body_mass_g, y = bill_length_mm)) +\n  facet_grid(vars(sex), vars(island)) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-31-1.svg)\n:::\n:::\n\n\n\n\n## Coords\n\nThere are multiple ways to change the axis limits in ggplot2.  First, you can change them with `scale_x_continuous()` or `scale_y_continuous()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-32-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np + scale_x_continuous(limits = c(4000, 5000))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 222 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 222 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-33-1.svg)\n:::\n:::\n\n\n\nYou can see in the warning message printed that 222 rows have been **removed** before drawing this plot.  You can tell because the trend lines produced by `geom_smooth()` now have different slopes because they are fit to only a subset of data!\n\nYou can also change the limits with `coord_cartesian()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np + coord_cartesian(xlim = c(4000, 5000))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-34-1.svg)\n:::\n:::\n\n\n\nThis has the effect of ***zooming in*** on the x-axis.  The lines and points just outside of the limits are cut off and the slopes of the trend lines are unaffected because no data has been removed.\n\nWe can use `coord_trans()` to warp the coordinate system to plot things on a log scale, for example.  This does something slightly different than `scale_x_log10()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(x = 1:100,\n           y = x^2)\np2 <- \n  ggplot(df, aes(x = x, y = y)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\np2\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-35-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np2 + coord_trans(x = \"log10\") \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-36-1.svg)\n:::\n\n```{.r .cell-code}\np2 + scale_x_log10()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](notes_files/figure-typst/unnamed-chunk-36-2.svg)\n:::\n:::\n\n\n\nYou can see that `coord_trans()` *warps* the coordinate space because the regression line, which we specified as being straight with `method = \"lm\"`, is now curved.  But with `scale_x_log10()` the line stays straight—the scale transforms the data *before* `geom_smooth()` calculates its statistics.\n",
    "supporting": [
      "notes_files/figure-typst"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}