{
  "hash": "1eac69892b62c3b322537190762d0c8f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exploring the Wide World of ggplot2 Extensions\"\nauthor: \n  - \"Eric R. Scott\"\n  - \"Kristina Riemer\"\n  - \"Renata Diaz\"\ndate: 2024-06-20\nformat: \n  uaz-revealjs: default\nexecute: \n  echo: true\neditor: visual\n---\n\n\n## Learning Objectives\n\n-   Understand where to find packages that extend `ggplot2`\n-   Demonstrate some extension packages\n    -   Assemble multi-panel figures with `patchwork`\n    -   Make animated plots with `gganimate`\n    -   Visualize distributions with `ggdist`\n    -   Plot network data with `ggraph`\n\n## Packages\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(palmerpenguins) #for example dataset\nlibrary(patchwork) #for multi-panel figures\nlibrary(gridGraphics) #for combining ggplot2 and base R figures\nlibrary(gganimate) #for animated plots\nlibrary(ggdist) #for showing distributions + uncertainty in data\nlibrary(dplyr) #for cleaning data\nlibrary(ggraph) #for network data\n```\n:::\n\n\n# Extensions to `ggplot2`\n\nThere are many kinds of extensions to `ggplot2`, ranging from simple to complex, from familiar to transformative.\n\n## General-use and modular\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|1,4|2,5\"}\nlibrary(ggbeeswarm)\nlibrary(ggthemes)\nggplot(penguins, aes(x = species, y = body_mass_g)) +\n  geom_beeswarm() +\n  theme_economist()\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-3-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n::: notes\n`geom_beeswarm()` can easily be combined with other `geom_`s\n:::\n\n## \"All-in-one\" functions\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|1,2|3\"}\nlibrary(ggstatsplot)\nggbetweenstats(penguins, species, body_mass_g) +\n  scale_y_continuous(\"Body Mass (g)\", n.breaks = 10)\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n::: notes\nWith great power comes great responsibilityâ€”make sure you trust these stats!\\\nNotice that the output is a ggplot object, so you can continue to add layers to it.\n:::\n\n## Transformative & field-specific\n\n::: {layout-ncol=\"2\"}\n[![ggspectra](https://exts.ggplot2.tidyverse.org/gallery/images/ggspectra.png){width=\"100%\"}](https://docs.r4photobiology.info/ggspectra)\n\n[![gggenes](https://exts.ggplot2.tidyverse.org/gallery/images/gggenes.png){width=\"100%\"}](https://wilkox.org/gggenes)\n:::\n\n## Finding Extensions\n\n-   Browse the `ggplot2` [extensions gallery](https://exts.ggplot2.tidyverse.org/gallery/)\n\n-   Check out the [Awesome `ggplot2`](https://github.com/erikgahner/awesome-ggplot2#readme) list\n\n-   [The R Graph Gallery](https://r-graph-gallery.com/)\n\n-   Google search with \"ggplot2\" keyword\n\n# Package Demos\n\n## `patchwork`\n\n`patchwork` allows you to compose multi-panel figures with ease\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-5-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n::: notes\nThings to notice:\n\n-   Plots areas are aligned despite one not having a y-axis label\n-   Only one legend\n-   Labels for panels A, B, C\n:::\n\n## Example plots\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 <- \n  ggplot(penguins, aes(x = body_mass_g, \n                       y = bill_length_mm, \n                       color = species)) +\n  geom_point()\np2 <-\n  ggplot(penguins, aes(x = bill_depth_mm, \n                       y = bill_length_mm, \n                       color = species)) +\n  geom_point()\np3 <- \n  ggplot(penguins, aes(x = body_mass_g)) + \n  facet_wrap(vars(island)) +\n  geom_histogram()\n```\n:::\n\n\n## Combine plots\n\n-   `+` wraps plots\n-   `|` combines plots horizontally\n-   `/` combines plots vertically\n-   `()` can be used to nest operations\n\n## Combine plots\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n(p1 | p2) / p3\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Combine guides\n\nIf plots have *identical* guides, you can combine them with `plot_layout(guides = \"collect\")`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 + p2 + plot_layout(guides = \"collect\")\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-8-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n::: notes\nidentical means same scale, same title, same glyph\n:::\n\n## Combining axes\n\nAs of the most recent version of `patchwork` (v1.2.0) you can also combine identical axes.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 + p2 + plot_layout(guides = \"collect\", axes = \"collect\")\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Controlling layout\n\nFor more options for controlling layout, see the related vignette on the package website.\n\n-   Adding empty areas\n-   Inset plots\n-   Adjusting widths and heights\n\n## Tags\n\nYou can add \"tags\" to each panel with `plot_annotation()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 + p2 + plot_annotation(tag_levels = \"A\", tag_suffix = \")\")\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Modifying all panels\n\nYou can use the `&` operator instead of `+` to modify **all** elements of a multi-panel figure.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 + p2 & theme_bw() & scale_color_viridis_d()\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-11-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Using with base R plots\n\nYou can even combine `ggplot2` plots with base R plots with a special syntax\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 + ~hist(penguins$bill_depth_mm, main = \"\")\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-12-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## `gganimate`\n\nDisplay transitions between states of a variable\n\nUseful for showing trends in time series & spatial data\n\n::: callout-tip\n## Advice from the experts!\n\n\"Graphic elements should only transition between instances of the same underlying phenomenon\"\n:::\n\n## Example\n\nBody size distribution of penguins changing over the years\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = body_mass_g, col = species)) +\n  geom_density() +\n  facet_wrap(~year)\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-13-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Show annual transition\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(gganimate)\n\nggplot(penguins, aes(x = body_mass_g, col = species)) +\n  geom_density() +\n  transition_time(year) +\n  ggtitle('Year: {frame_time}')\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-14-1.gif){fig-align='center'}\n:::\n:::\n\n\n## Add history\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = body_mass_g, col = species)) +\n  geom_density() +\n  transition_time(year) +\n  ggtitle('Year: {frame_time}') +\n  shadow_wake(wake = 0.3, wrap = FALSE)\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-15-1.gif){fig-align='center'}\n:::\n:::\n\n\n## Modify transition speed\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = body_mass_g, col = species)) +\n  geom_density() +\n  transition_time(year) +\n  ggtitle('Year: {frame_time}') +\n  ease_aes(\"quintic-in-out\")\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-16-1.gif){fig-align='center'}\n:::\n:::\n\n\n## Have axes follow data\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = body_mass_g, col = species)) +\n  geom_density() +\n  transition_time(year) +\n  ggtitle('Year: {frame_time}') +\n  view_follow()\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-17-1.gif){fig-align='center'}\n:::\n:::\n\n\n## Save file\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nanim_save(\"~/Desktop/test_anim.gif\")\n```\n:::\n\n\n# `ggdist` for distributions {.smaller}\n\n-   Easily add nuance to density/histogram/ribbon plots\n-   Particularly useful for:\n    -   Sample data\n    -   Fitted values + uncertainty\n    -   Frequentist or Bayesian parameter distributions\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n## `slabinterval`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins %>%\n  ggplot(aes(x = body_mass_g, y = species)) +\n  stat_slabinterval()\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/slabinterval-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n::: notes\n-   This plots a \"halfeye\" plot with a density distribution and a line at the bottom showing the mean and quantiles of the data.\n-   Note that we didn't have to create any new objects; stat_slabinterval automatically calculates densities and summary statistics. There are corresponding geom\\_\\* functions for already summarized data.\n-   Other plot types within ggdist are variations on the stat_slabinterval theme.\n-   Often you'll want to use these shortcuts instead of building something up out of scratch.\n:::\n\n## Example: `dotsinterval`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins %>%\n  ggplot(aes(x = body_mass_g, y = species)) +\n  stat_dotsinterval()\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-20-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Example: `interval`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins %>%\n  ggplot(aes(x = body_mass_g, y = species)) +\n  stat_interval()\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-21-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Example: `interval`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins %>%\n  ggplot(aes(x = body_mass_g, y = species)) +\n  stat_interval() +\n  scale_color_brewer()\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-22-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Combining elements: Raincloud plots\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins %>%\n  ggplot(aes(x = body_mass_g, y = species)) +\n  stat_slabinterval() +\n  stat_dotsinterval(side = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-23-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Ribbon plots\n\n`stat_lineribbon` plots quantile intervals around a line automatically:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins %>%\n  ggplot(aes(x = year, y = body_mass_g)) +\n  stat_lineribbon() +\n  scale_fill_brewer() +\n  facet_wrap(vars(species))\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-24-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Ribbon plots\n\nYou can control the bands using the `.width` argument:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins %>%\n  ggplot(aes(x = year, y = body_mass_g)) +\n  stat_lineribbon(.width = c(.8, .97, .99)) +\n  scale_fill_brewer() +\n  facet_wrap(vars(species))\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-25-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Ribbon plots\n\n`.width = ppoints()` creates a gradient:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins %>%\n  ggplot(aes(x = year, y = body_mass_g, fill = after_stat(.width))) +\n  stat_lineribbon(.width = ppoints(100)) +\n  scale_fill_distiller() +\n  facet_wrap(vars(species))\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-26-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Visualizing frequentist model output\n\nCombined with the `broom` and `distributional` packages, `ggdist` can display frequentist model uncertainty.\n\n## Visualizing frequentist model output\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(broom)\nlibrary(distributional)\n\npenguin_lm <- lm(body_mass_g ~  species, data = penguins)\n\nbroom::tidy(penguin_lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 5\n  term             estimate std.error statistic   p.value\n  <chr>               <dbl>     <dbl>     <dbl>     <dbl>\n1 (Intercept)        3706.       38.1    97.2   6.88e-245\n2 speciesChinstrap     26.9      67.7     0.398 6.91e-  1\n3 speciesGentoo      1386.       56.9    24.4   1.01e- 75\n```\n\n\n:::\n:::\n\n\n## Visualizing frequentist model output\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbroom::tidy(penguin_lm) |>\n  ggplot(aes(y = term)) +\n    stat_halfeye(\n      aes(xdist = dist_student_t(df = df.residual(penguin_lm), \n                                 mu = estimate, \n                                 sigma = std.error))\n    )\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-28-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Visualizing frequentist model output\n\n-   You can also use ribbons to show uncertainty around lines of fit.\n-   We'll need a linear model with a continuous predictor.\n-   And we'll use `tidyr::expand` and `broom::augment` to get the predicted line of fit from the model.\n\n## Visualizing frequentist model output\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguin_lm_cont <- lm(body_mass_g ~  year + species, data = penguins)\n\npenguin_lm_cont_fitted <- penguins %>%\n  group_by(species) %>%\n  tidyr::expand(year = seq(min(year), max(year), length.out = 3)) %>%\n  augment(penguin_lm_cont, newdata = ., se_fit = TRUE) \n\nhead(penguin_lm_cont_fitted) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 4\n  species    year .fitted .se.fit\n  <fct>     <dbl>   <dbl>   <dbl>\n1 Adelie     2007   3703.    50.4\n2 Adelie     2008   3706.    38.2\n3 Adelie     2009   3709.    48.2\n4 Chinstrap  2007   3730.    63.6\n5 Chinstrap  2008   3733.    56.0\n6 Chinstrap  2009   3737.    64.5\n```\n\n\n:::\n:::\n\n\n## Visualizing frequentist model output\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  ggplot(penguin_lm_cont_fitted, aes(x = year)) +\n  stat_lineribbon(\n    aes(ydist = dist_student_t(df = df.residual(penguin_lm_cont), \n                               mu = .fitted, \n                               sigma = .se.fit))) +\n  facet_wrap(vars(species)) +\n  scale_fill_brewer() \n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-30-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Visualizing Bayesian model components\n\n-   `ggdist` plots are great for visualizing Bayesian model components:\n    -   priors\n    -   posterior draws\n    -   posterior predictions\n-   We can fit a simple Bayesian linear model and visualize the posterior...\n\n## Fitting a model\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(brms)\nlibrary(tidybayes)\n\npenguins_brm <- brm(body_mass_g ~ species, data = penguins, iter = 1000)\n```\n:::\n\n\n## Extracting draws from the posterior\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins_brm %>%\ntidybayes::gather_draws(\nc(b_Intercept,\nb_speciesChinstrap,\nb_speciesGentoo)\n) |>\nhead() \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 5\n# Groups:   .variable [1]\n  .chain .iteration .draw .variable   .value\n   <int>      <int> <int> <chr>        <dbl>\n1      1          1     1 b_Intercept  3646.\n2      1          2     2 b_Intercept  3680.\n3      1          3     3 b_Intercept  3694.\n4      1          4     4 b_Intercept  3688.\n5      1          5     5 b_Intercept  3632.\n6      1          6     6 b_Intercept  3779.\n```\n\n\n:::\n:::\n\n\n## Posterior draws rainclouds\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins_brm |>\ntidybayes::gather_draws(\nc(b_Intercept,\nb_speciesChinstrap,\nb_speciesGentoo)) %>%\nggplot(aes(y = .variable, x = .value)) +  \n  geom_dotsinterval(side = \"bottom\", dotsize = .05) + \n  stat_slabinterval() \n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-34-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Takeaways\n\n-   `ggdist` contains `geom` and `stat` functions for plotting distributions.\n-   Slab functions show variations on density plots.\n-   Ribbons show variation around a line.\n-   `ggdist` plays nicely with Bayesian and frequentist modeling frameworks.\n\n# Relational data with `ggraph`\n\n## `ggraph` {.smaller}\n\n-   For plotting networks, graphs, and trees\n-   Adds **layouts** and geoms for nodes and edges\n-   Integrates with [`tidygraph`](https://ggraph.data-imaginist.com/articles/tidygraph.html) to wrap around numerous other graph object types (`igraph`, `dedrogram`, `hclust`, `graph`, `phylo`, ...)\n\n## Example: Mouse data\n\nBegin by loading network data, in this case from the `graphml` format.\n\nData from [So et al. 2015](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0134509), in the [Animal Social Networks Repository](https://github.com/bansallab/asnr/tree/master).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(igraph)\nlibrary(tidygraph)\n\nmouse_sniffing <- read_graph(here::here(\"2024\", \"03-extensions\", \"mouse_so_grooming_network.graphml\"),\nformat = \"graphml\")\n```\n:::\n\n\n## Example: `as_tbl_graph`\n\n`tidygraph::as_tbl_graph` standardizes different graph storage formats.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmouse_graph <- mouse_sniffing |>\nas_tbl_graph() \n```\n:::\n\n\n## Plotting mouse sniffing data\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggraph(mouse_graph, layout = 'kk') + \n    geom_edge_fan() + \n    geom_node_point() +\n    theme_minimal() +\n    ggtitle(\"Mouse sniffs\")\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-37-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Alternate layouts\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggraph(mouse_graph, layout = 'eigen') + \n    geom_edge_fan() + \n    geom_node_point() +\n    theme_minimal() +\n    ggtitle(\"Mouse sniffs\")\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-38-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Alternate layouts\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggraph(mouse_graph, layout = 'linear', circular = TRUE) + \n    geom_edge_fan() + \n    geom_node_point() +\n    theme_minimal() +\n    ggtitle(\"Mouse sniffs\")\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-39-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Example: phylogenies\n\n-   `ggraph` can plot phylogenetic trees.\n-   We'll get a phylogeny using the R Open Tree of Life (`rotl`) and plot it.\n\n## Getting a phylogeny\n\n![](krat.jpg){fig-align=\"center\"}\n\n## Getting a phylogeny\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(rotl)\nrodent_id <- tnrs_match_names(\"Heteromyidae\")\nrodent_tree <- tol_subtree(ott_id = ott_id(rodent_id))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nProgress [----------------------------------] 0/11 (  0) ?s\nProgress [================================] 11/11 (100)  0s\n                                                            \n```\n\n\n:::\n\n```{.r .cell-code}\nrodent_tree$node.label <- c(1:64)\nclass(rodent_tree)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"phylo\"\n```\n\n\n:::\n:::\n\n\n## Convert the phylogeny to a graph\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrodent_graph <- as_tbl_graph(rodent_tree)\n```\n:::\n\n\n## Dendrogram\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggraph(rodent_graph, \"dendrogram\") +\ngeom_edge_link()\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-42-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Unrooted tree\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggraph(rodent_graph, \"unrooted\") +\ngeom_edge_link()\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-43-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Takeaways\n\n-   `ggraph` can plot many different types of network objects.\n-   Use `as_tbl_graph` to convert graphs to `ggraph`-compatible objects.\n-   Layouts strongly determine the appearance and interpretability of a graph.\n\n## Extensions Resources\n\n`patchwork`\n\n-   [Package website](https://patchwork.data-imaginist.com/index.html)\n\n`gganimate`\n\n-   [Cheat sheet](https://rstudio.github.io/cheatsheets/gganimate.pdf)\n-   [Website](https://gganimate.com)\n\n## Extensions Resources\n\n`ggdist`\n\n-   [Documentation](https://mjskay.github.io/ggdist/index.html)\n-   More about [tidybayes](http://mjskay.github.io/tidybayes/)\n\n`ggraph`\n\n-   [`ggraph` documentation](https://ggraph.data-imaginist.com/index.html)\n-   [`tidygraph` documentation](https://tidygraph.data-imaginist.com/)\n-   [`igraph` R package documentation](https://r.igraph.org/)\n-   [`rotl` documentation](https://cran.r-project.org/web/packages/rotl/rotl.pdf)\n\n## Getting Help\n\n-   Our [drop-in hours](https://datascience.cct.arizona.edu/drop-in-hours)\n\n-   [UA Data Science Slack](https://join.slack.com/t/uadatascience/shared_invite/zt-1xjxht9k0-E489WA6axO_SRVeKQh3cXg)\n\n# Anything we missed?\n\nGot a `ggplot2` question we didn't cover in this workshop series?\nLet's figure it out together!\n\n## Data sources\n\nPratha Sah, JosÃ© David Mendez, Shweta Bansal.\nA multi-species repository of social networks.\nScientific Data, 6:44 (2019)\n\nSo, N., Franks, B., Lim, S., and Curley, J.P.\n2015.\nA social network approach reveals associations between mouse social dominance and brain gene expression.\nPlosOne 10(7):e0134509\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}