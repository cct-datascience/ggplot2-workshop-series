{
  "hash": "12b1d08e68e3a565a155b746841246a0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Extensions\nauthor: Renata Diaz \ndate: 2024-06-20\nformat: \n  uaz-revealjs:\n  # revealjs:\n    incremental: true\ncss: custom.css\n---\n\n::: {.cell}\n\n:::\n\n\n# `ggdist` for distributions {.smaller}\n\n- Easily add nuance to density/histogram/ribbon plots\n- Particularly useful for:\n  - Sample data\n  - Fitted values + uncertainty\n  - Frequentist or Bayesian parameter distributions\n  \n## `slabinterval`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  ggplot(aes(x = body_mass_g, y = species)) +\n  stat_slabinterval()\n```\n\n::: {.cell-output-display}\n![](dist-and-networks-slides_files/figure-revealjs/slabinterval-1.png){width=960}\n:::\n:::\n\n::: notes\n\n- This plots a \"halfeye\" plot with a density distribution and a line at the bottom showing the mean and quantiles of the data. \n- Note that we didn't have to create any new objects; stat_slabinterval automatically calculates densities and summary statistics. There are corresponding geom_* functions for already summarized data. \n- Other plot types within ggdist are variations on the stat_slabinterval theme.\n- Often you'll want to use these shortcuts instead of building something up out of scratch.\n:::\n\n## Example: `dotsinterval`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  ggplot(aes(x = body_mass_g, y = species)) +\n  stat_dotsinterval()\n```\n\n::: {.cell-output-display}\n![](dist-and-networks-slides_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n## Example: `interval`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  ggplot(aes(x = body_mass_g, y = species)) +\n  stat_interval()\n```\n\n::: {.cell-output-display}\n![](dist-and-networks-slides_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n## Example: `interval`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  ggplot(aes(x = body_mass_g, y = species)) +\n  stat_interval() +\n  scale_color_brewer()\n```\n\n::: {.cell-output-display}\n![](dist-and-networks-slides_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n## Combining elements: Raincloud plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  ggplot(aes(x = body_mass_g, y = species)) +\n  stat_slabinterval() +\n  stat_dotsinterval(side = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](dist-and-networks-slides_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n## Ribbon plots\n\n- `geom_lineribbon` plots uncertainty bands around a line (similar to `geom_ribbon`).\n- First we need to summarize the data.\n\n## Ribbon plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_summary <- penguins %>%\n  group_by(year, species) %>%\n  median_qi(body_mass_g, .width = c(.50, .80, .95)) \n\nhead(penguins_summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n   year species   body_mass_g .lower .upper .width .point .interval\n  <int> <fct>           <dbl>  <dbl>  <dbl>  <dbl> <chr>  <chr>    \n1  2007 Adelie           3675  3325   3950     0.5 median qi       \n2  2007 Chinstrap        3700  3506.  3875     0.5 median qi       \n3  2007 Gentoo           5050  4650   5550     0.5 median qi       \n4  2008 Adelie           3700  3500   4088.    0.5 median qi       \n5  2008 Chinstrap        3750  3512.  4062.    0.5 median qi       \n6  2008 Gentoo           5000  4700   5400     0.5 median qi       \n```\n\n\n:::\n:::\n\n\n## Ribbon plots\n\nWe can then plot the summarized data using `geom_lineribbon`:\n\n## Ribbon plots\n\nWe can then plot the summarized data using `geom_lineribbon`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_summary %>%\n  ggplot(aes(x = year, y = body_mass_g, ymin = .lower, ymax = .upper)) +\n  geom_lineribbon() +\n  scale_fill_brewer() +\n  facet_wrap(vars(species))\n```\n\n::: {.cell-output-display}\n![](dist-and-networks-slides_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n\n## Ribbon plots\n\nAlternatively, `stat_lineribbon` will do this automatically:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  ggplot(aes(x = year, y = body_mass_g)) +\n  stat_lineribbon() +\n  scale_fill_brewer() +\n  facet_wrap(vars(species))\n```\n\n::: {.cell-output-display}\n![](dist-and-networks-slides_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n## Ribbon plots\n\nYou can control the bands using the `.width` argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  ggplot(aes(x = year, y = body_mass_g)) +\n  stat_lineribbon(.width = c(.8, .97, .99)) +\n  scale_fill_brewer() +\n  facet_wrap(vars(species))\n```\n\n::: {.cell-output-display}\n![](dist-and-networks-slides_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n\n## Ribbon plots\n\n`.width = ppoints()` creates a gradient:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  ggplot(aes(x = year, y = body_mass_g, fill = after_stat(.width))) +\n  stat_lineribbon(.width = ppoints(100)) +\n  scale_fill_distiller() +\n  facet_wrap(vars(species))\n```\n\n::: {.cell-output-display}\n![](dist-and-networks-slides_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n## Visualizing frequentist model output\n\nCombined with the `broom` and `distributional` packages, `ggdist` can display frequentist model uncertainty.\n\n## Visualizing frequentist model output\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(broom)\nlibrary(distributional)\n\npenguin_lm <- lm(body_mass_g ~  species, data = penguins)\n\nbroom::tidy(penguin_lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 5\n  term             estimate std.error statistic   p.value\n  <chr>               <dbl>     <dbl>     <dbl>     <dbl>\n1 (Intercept)        3706.       38.1    97.2   6.88e-245\n2 speciesChinstrap     26.9      67.7     0.398 6.91e-  1\n3 speciesGentoo      1386.       56.9    24.4   1.01e- 75\n```\n\n\n:::\n:::\n\n\n\n## Visualizing frequentist model output\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbroom::tidy(penguin_lm) |>\n  ggplot(aes(y = term)) +\n    stat_halfeye(\n      aes(xdist = dist_student_t(df = df.residual(penguin_lm), mu = estimate, sigma = std.error))\n    )\n```\n\n::: {.cell-output-display}\n![](dist-and-networks-slides_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n\n## Visualizing frequentist model output\n\n- You can also use ribbons to show uncertainty around lines of fit.\n- We'll need a linear model with a continuous predictor.\n- And we'll use `tidyr::expand` and `broom::augment` to get the predicted line of fit from the model.\n\n\n## Visualizing frequentist model output\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_lm_cont <- lm(body_mass_g ~  year + species, data = penguins)\n\npenguin_lm_cont_fitted <- penguins %>%\n  group_by(species) %>%\n  tidyr::expand(year = seq(min(year), max(year), length.out = 3)) %>%\n  augment(penguin_lm_cont, newdata = ., se_fit = TRUE) \n\nhead(penguin_lm_cont_fitted) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  species    year .fitted .se.fit\n  <fct>     <dbl>   <dbl>   <dbl>\n1 Adelie     2007   3703.    50.4\n2 Adelie     2008   3706.    38.2\n3 Adelie     2009   3709.    48.2\n4 Chinstrap  2007   3730.    63.6\n5 Chinstrap  2008   3733.    56.0\n6 Chinstrap  2009   3737.    64.5\n```\n\n\n:::\n:::\n\n\n## Visualizing frequentist model output\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  ggplot(penguin_lm_cont_fitted, aes(x = year)) +\n  stat_lineribbon(\n    aes(ydist = dist_student_t(df = df.residual(penguin_lm_cont), mu = .fitted, sigma = .se.fit))) +\n  facet_wrap(vars(species)) +\n  scale_fill_brewer() \n```\n\n::: {.cell-output-display}\n![](dist-and-networks-slides_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n## Visualizing Bayesian model components\n\n- `ggdist` plots are great for visualizing Bayesian model components:\n  - priors\n  - posterior draws\n  - posterior predictions\n- We can fit a simple Bayesian linear model and visualize the posterior...\n\n## Fitting a model\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(brms)\nlibrary(tidybayes)\n\npenguins_brm <- brm(body_mass_g ~ species, data = penguins, iter = 1000)\n```\n:::\n\n\n## Extracting draws from the posterior\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_brm %>%\ntidybayes::gather_draws(\nc(b_Intercept,\nb_speciesChinstrap,\nb_speciesGentoo)\n) |>\nhead() \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n# Groups:   .variable [1]\n  .chain .iteration .draw .variable   .value\n   <int>      <int> <int> <chr>        <dbl>\n1      1          1     1 b_Intercept  3646.\n2      1          2     2 b_Intercept  3680.\n3      1          3     3 b_Intercept  3694.\n4      1          4     4 b_Intercept  3688.\n5      1          5     5 b_Intercept  3632.\n6      1          6     6 b_Intercept  3779.\n```\n\n\n:::\n:::\n\n\n## Plotting slabintervals\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_brm %>%\n tidybayes::gather_draws(\nc(b_Intercept,\nb_speciesChinstrap,\nb_speciesGentoo)\n) %>%\n  ggplot(aes(y = .variable, x = .value)) +\n  stat_slabinterval() \n```\n\n::: {.cell-output-display}\n![](dist-and-networks-slides_files/figure-revealjs/unnamed-chunk-18-1.png){width=960}\n:::\n:::\n\n\n## Plotting rainclouds\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_brm |>\ntidybayes::gather_draws(\nc(b_Intercept,\nb_speciesChinstrap,\nb_speciesGentoo)) %>%\nggplot(aes(y = .variable, x = .value)) +  geom_dotsinterval(side = \"bottom\", dotsize = .05) + \nstat_slabinterval() \n```\n\n::: {.cell-output-display}\n![](dist-and-networks-slides_files/figure-revealjs/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n## Takeaways\n\n- `ggdist` contains `geom` and `stat` functions for plotting distributions.\n- Slab functions show variations on density plots.\n- Ribbons show variation around a line.\n- `ggdist` plays nicely with Bayesian and frequentist modeling frameworks.\n\n## For more\n\nSee the [`ggdist` documentation here](https://mjskay.github.io/ggdist/index.html)!\n\n# Network data with `ggraph`\n\n## `ggraph`\n\n- Uses `tidygraph`, which allows you to use `igraph` and other network packages in a tidy framework.\n  - 2 tables, nodes and edges\n\n\nShow:\n\n* Data input and `as_tbl_graph`\n\n* Network\n* Dendrogram\n* Circular dendrogram\n",
    "supporting": [
      "dist-and-networks-slides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}