{
  "hash": "5d035fe0f972eb57f221f3a29ff455fb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Effective Data Communication With {ggplot2}\nsubtitle: Part II - Putting theory into practice\nauthor: Renata Diaz\ndate: 2024-06-13\nformat: \n  uaz-revealjs:\n  # revealjs:\n    incremental: true\ncss: custom.css\n---\n\n\n## Learning Objectives\n\n-   Implement principles of effective design using {ggplot}. Including:\n-   Maximize data:ink ratio using themes and facets\n-   Customize marks and channels using geoms and aes(thetics).\n-   Work through an example as a group.\n\n## Maximizing data:ink ratio\n\n## The {ggplot2} default\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(body_mass_g, \n                     bill_depth_mm,\n                     color = species)) +\n  geom_point() \n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n## {theme\\_\\*}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(body_mass_g, \n                     bill_depth_mm,\n                     color = species)) +\n  geom_point() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n## {theme\\_\\*}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(body_mass_g, \n                     bill_depth_mm,\n                     color = species)) +\n  geom_point() +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n## {theme\\_\\*}\n\nFor a complete list of preset themes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?theme_void\n```\n:::\n\n\n[Or online here.](https://ggplot2.tidyverse.org/reference/ggtheme.html)\n\n## {theme\\_\\*}\n\n::: callout-important\n`theme_bw()` and `theme_minimal` can remove a lot of unnecessary ink with one fell swoop.\n\nUse `theme_set(theme_bw())` outside your plot code to set the theme for a whole script or notebook.\n:::\n\n## Modify a theme\n\n-   The preset themes either leave unnecessary ink, or remove necessary information.\n-   The `theme()` function allows you to modify individual elements of a theme\n-   The `theme` options are vast. We'll break it down.\n\n## Anatomy of `theme`\n\n- `theme( <part of the plot> = <element_*(element_options)>)`\n- Parts of the plot: axis, legend, panel, plot, strip.\n- Elements: element_blank, element_text, element_line, element_rect.  \n- You can modify all lines/rectangles at once using `theme(line = element_line())`, etc. \n\n## Modifying elements\n\n## Maximizing use of space\n\n## `facet_wrap` \n\n## `facet_grid`\n\n## Marks and channels\n\n- Marks correspond to `geoms`\n    - `geom_point, geom_line, geom_col, ...`\n- Align marks with data using `aes`:\n    - `x` and `y` for position\n    - `color` and `fill` for color scale\n      - Discrete or continuous\n    - `alpha` for opacity\n    - `size` for size\n    \n\n## Example modifying geoms\n\n## Worked example as a group",
    "supporting": [
      "slides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}