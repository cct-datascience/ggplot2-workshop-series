---
title: Foundations of {ggplot2}
author: Eric R. Scott
format: 
  uaz-revealjs:
  # revealjs:
    incremental: true
css: custom.css
bibliography: references.bib
---

## Learning Objectives

```{r}
#| label: setup
#| include: false

library(palmerpenguins)
library(ggplot2)
library(glue)
library(gapminder)
library(countdown)
library(tidyr)
## pak::pak("r-for-educators/flair")
# library(flair)
theme_set(theme_bw())
set.seed(123)
```

-   Understand the "grammar of graphics" and how it inspired `ggplot2`'s design
-   Know what it means to "map data to aesthetics"
-   Learn to plot different data sets on the same visualization
-   Understand the relationship between a "geom" and a "stat"
-   Learn to customize scales and guides

------------------------------------------------------------------------

![](https://media.springernature.com/w316/springer-static/cover-hires/book/978-0-387-28695-2?as=webp){fig-align="center"}

## A Grammar of Graphics

-   A book by @wilkinson2005
-   Inspired the development of *many* graphics programs including `ggplot2` [@wickham2010]
-   Alternative to having a function for every kind of plot
-   A framework for layering elements to create any kind of plot

## Grammar of Graphics Components

```{r}
#| label: peng_plot
#| include: false
p <- 
  ggplot(penguins |> drop_na(), aes(x = body_mass_g, y = bill_length_mm, color = species)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  facet_wrap(vars(island), ncol = 1)
```

::: columns
::: {.column width="50%"}
::: nonincremental
1.  Data
2.  Aesthetics
3.  Scales (and guides)
4.  Geometric objects
5.  Statistics
6.  Facets
7.  Coordinate system
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| fig-height: 5
#| fig-width: 4.5
p
```
:::
:::

::: notes
We're going to go through each of these and examine how they appear in this example plot
:::

## Data

::: columns
::: {.column width="50%"}
Observations and variables to be visualized.

What data is being visualized?

-   Body mass measured in grams

-   Bill length measured in mm

-   Island and species categories
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| fig-height: 5
#| fig-width: 4.5
p
```
:::
:::

## Aesthetics

::: columns
::: {.column width="50%"}
Visual elements (color, shape, position, size, etc.) used to encode data.

What aesthetics are used to encode these data?

-   Color

-   x position

-   y position
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| fig-height: 5
#| fig-width: 4.5
p
```
:::
:::

## Scales (and guides)

::: columns
::: {.column width="50%"}
Scales translate data units into visual units, guides translate visual units back to data units.

What scales are used?

-   Continuous and linear x and y axes (scales)

<!-- -->

-   Discrete (categorical) color scale
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| fig-height: 5
#| fig-width: 4.5
p
```
:::
:::

::: notes
Scale translates data units (e.g. grams) into visual units (pixels).
Guides translate visual units (e.g. color hue) back to data units (species category).
Walk through this with annotations.
:::

## Geometric Objects ("geoms")

::: columns
::: {.column width="50%"}
Objects, often having multiple aesthetics, that represent data visually.

What geometric objects are used?

-   Data is represented using circles/points
-   Trend is represented as a line
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| fig-height: 5
#| fig-width: 4.5
p
```
:::
:::

::: notes
Both aesthetics and geoms are related to the visual representation of data.
To distinguish aesthetics and geoms, think about how geoms can have *many* aesthetics.
E.g. points have position, shape, size, color, and transparency and different data could be mapped to each of those aesthetics.
:::

## Statistics ("stats")

::: columns
::: {.column width="50%"}
Any calculations or transformations applied to the data in order to plot it.

What "stats" are used?

-   For points, none (stat = "identity")

-   For trend lines, linear regression
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| fig-height: 5
#| fig-width: 4.5
p
```
:::
:::

::: notes
If the data are 344 observations, are any transformations needed to draw one of the two "geoms" in the plot?
:::

## Facets

::: columns
::: {.column width="50%"}
Plots can be split into small multiples or "facets" by a variable.

What is the faceting variable?

-   Faceted by island
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| fig-height: 5
#| fig-width: 4.5
p
```
:::
:::

::: notes
Not every plot has facets.
Plots can be faceted by multiple (2) variables in a grid
:::

## Coordinate System

::: columns
::: {.column width="50%"}
How spatial positions are represented on paper (or screen)—e.g.
map projections.

What coordinate system is used?

-   Cartesian coordinates
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| fig-height: 5
#| fig-width: 4.5
p
```
:::
:::

::: notes
Other options include polar coordinates or the many possible coordinate systems used in maps.
:::

## Practice

Identify each of the seven components of this plot

::: columns
::: {.column width="50%"}
::: nonincremental
1.  Data
2.  Aesthetics
3.  Scales
4.  Geometric Objects
5.  Statistics
6.  Facets
7.  Coordinate System
:::
:::

::: {.column width="50%"}
[![](https://s3.eu-west-1.amazonaws.com/static.gapminder.org/GapminderMedia/wp-uploads/20161215191134/countries_health_wealth_2016_v13.jpg){fig-align="center"}](https://www.gapminder.org/tag/chart/)
:::
:::

## Break ⏰

```{r}
#| echo: false
countdown::countdown(
  minutes = 10L,
  font_size = "5em",
  left = 0,
  right = 0,
  bottom = 0
)
```

# `ggplot2` and the Grammar of Graphics

::: notes
Now we're going to go through each of the seven components and see some examples of how they are implemented in `ggplot2`
:::

## Data

::: nonincremental
-   Data is *inherited* from `ggplot()` by all layers, but can be overridden for specific layers

-   Worked example: jitter plot of raw data with mean ± standard deviation
:::

```{r}
#| fig-align: center
#| fig-height: 4
#| fig-width: 7
library(tidyverse)
library(palmerpenguins)
peng_summary <- 
  penguins |> 
  group_by(island) |> 
  summarize(
    mean_mass = mean(body_mass_g, na.rm = TRUE),
    lower_sd = mean_mass - sd(body_mass_g, na.rm = TRUE),
    upper_sd = mean_mass + sd(body_mass_g, na.rm = TRUE)
  )
ggplot(penguins, aes(x = island, y = body_mass_g)) +
  geom_jitter(alpha = 0.4) +
  geom_pointrange(
    data = peng_summary,
    aes(y = mean_mass, ymin = lower_sd, ymax = upper_sd),
    shape = "square",
    color = "blue"
  )
```

##  {.smaller}


```{r}
#| echo: true
#| output-location: column
#| fig-height: 5.5
#| fig-width: 4.5
#| classes: output6040
library(tidyverse)
library(palmerpenguins)

#summarize dataset
peng_summary <- 
  penguins |> 
  group_by(island) |> 
  summarize(
    mean_mass = mean(body_mass_g, na.rm = TRUE),
    lower_sd = mean_mass - sd(body_mass_g, na.rm = TRUE),
    upper_sd = mean_mass + sd(body_mass_g, na.rm = TRUE)
  )

ggplot(peng_summary, aes(x = island, y = mean_mass)) +
  #mean
  geom_point(shape = "square", color = "blue", size = 2.5) +
  #sd
  geom_errorbar(
    data = peng_summary,
    aes(y = mean_mass, ymin = lower_sd, ymax = upper_sd),
    width = 0.1,
    color = "blue"
  ) +
  #add raw data:
  geom_jitter(
    data = penguins,
    aes(y = body_mass_g),
    alpha = 0.4,
    height = 0
  )
```


::: notes
Start by summarizing the `penguins` dataset to get some summary statistics for the error bars.
Notice that `ggplot()` uses the raw data though.\

\
Then add the raw data points, in this case with `geom_jitter()`\
\
Then add the `geom_pointrange()`.
Notice that we override the inherited data with `data = peng_summary` .
The `x` mapping is inherited, but we need to supply new aesthetic mappings for `y`, `ymin`, and `ymax`
:::

## Aesthetics

::: nonicremental
-   Aesthetics are *inherited* when placed in `ggplot()` but can also be specified per layer
-   Aesthetics can be mapped to data or set as constant
-   All the aesthetics and their possible values: <https://ggplot2.tidyverse.org/articles/ggplot2-specs.html>
-   Worked example: box plot for each island layered ontop of jitter plot for each island x sex combination.
:::

::: notes
This might be a good place to look through help files and figure out which aesthetics are valid for mapping
:::

##  {.smaller}

Aesthetic mappings supplied to `ggplot()` are inherited, aesthetic mappings supplied to a geom only affect that geom.

```{r}
#| echo: true
#| output-location: fragment
ggplot(penguins, aes(x = island, y = body_mass_g)) +
  geom_boxplot() +
  geom_jitter(aes(color = sex))
```


## Scales

-   `scale_` functions affect the range (limits) and breaks of scales and the labels and appearance of corresponding guides.
-   Worked example: 1) re-order and re-color a discrete color scale, 2) change the number of breaks on the axes

##  {.smaller}

```{r}
#| echo: true
#| fig-align: center
p + 
  scale_color_manual(
    values = c(
      "Adelie" = "#7570b3",
      "Chinstrap" = "#d95f02",
      "Gentoo" = "#1b9e77"
    ),
    breaks = c("Gentoo", "Chinstrap", "Adelie")
  ) +
  scale_x_continuous(
    n.breaks = 10
  ) +
  scale_y_continuous(
    breaks = seq(from = 30, to = 65, by = 5.5)
  )
```

::: notes
`values` takes a named vector and is used to assign a color (hex code or color name) to each level of the variable.
`breaks` changes the order.
:::


## Geoms

-   Every geom has a default stat, but it can be overridden
-   Not all geoms use the same aesthetics
-   Worked example: explore the anatomy of a help file (e.g. `?geom_point()`)
    -   How can you determine the default stat for a geom?
    -   How can you find out what aesthetics a geom has?

##  {.smaller}

```{r}
#| echo: true
#| fig-align: center
df <- expand_grid(x = LETTERS[1:5], y = 1:5)
ggplot(df) +
  geom_point(aes(x = x, y = y, 
        color = x, shape = x,
        size = y, alpha = y, stroke = y))
```

::: callout-caution
With great power, comes great responsibility!
It's not always a *good idea* to map data to aesthetics just because you can.
Stay tuned for part 2 of this series for more!
:::

## Stats

-   Every stat has a default geom and you *usually* use the `geom_*()` function
-   Some stats calculate multiple values that are available with `after_stat()`
-   Worked examples: 
    1. Adding mean ± SD on top of jitter plot with `stat_summary()` 
    2. Making a binned density plot with `geom_histogram()` and `after_stat()`

## {.smaller}
`stat_summary()`

```{r}
#| echo: true
#| fig-align: center
ggplot(penguins, aes(x = island, y = body_mass_g)) +
  geom_jitter(alpha = 0.4, height = 0) +
  stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1),
               color = "blue", shape = "square")
```

## {.smaller}
Binned density plot with `geom_histogram()` and `after_stat()`

```{r}
#| echo: true
#| fig-align: center
ggplot(penguins) +
  geom_histogram(aes(x = body_mass_g, y = after_stat(density))) +
  facet_wrap(vars(island))
```


## Facets

-   Implemented with `facet_wrap()` and `facet_grid()`
-   Facets will be explored more in part 2 of this series

## Coords

-   Adjusting x and y limits with `coord_cartesian()` is different than adjusting limits in a scale
-   `coord_polar()` for polar data, `coord_sf()` for maps
-   Worked example: zooming in on data

##  {.smaller}

Setting axis limits in `scale_x_continuous()` *removes* data that is out of range

```{r}
#| echo: true
#| warning: true
#| fig-align: center

p + scale_x_continuous(limits = c(4000, 5000))

```

::: notes
Importantly, notice that the best-fit line from `geom_smooth()` is now *only* considering the points between 4000 and 5000 g body mass!
:::

## {.smaller}

Setting axis limits in `coord_cartesian()` simply *zooms in*

```{r}
#| echo: true
#| warning: true
#| fig-align: center

p + coord_cartesian(xlim = c(4000, 5000))

```

::: notes
Notice that points whose centers are < 4000 or > 5000 still show up
:::

## Resources

- [ggplot2: Elegant Graphics for Data Analysis (3e)](https://ggplot2-book.org/)
- [The R Graph Gallery](https://r-graph-gallery.com/)
- [ggplot2 documentation](https://ggplot2.tidyverse.org/index.html)
- CCT Data Science [drop-in hours](https://datascience.cct.arizona.edu/events/weekly-drop-hours-alvsce-researchers) (Tuesdays 9-10am)
- [Data Science Incubator](https://datascience.cct.arizona.edu/incubator)


## References

::: refs
:::
