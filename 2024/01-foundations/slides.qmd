---
title: Foundations of {ggplot2}
author: Eric R Scott
format: 
  uaz-revealjs:
  # revealjs:
    incremental: true
css: custom.css
bibliography: references.bib
---

## Learning Objectives

```{r}
#| label: setup
#| include: false

library(palmerpenguins)
library(ggplot2)
library(glue)
library(gapminder)
library(countdown)
## pak::pak("r-for-educators/flair")
# library(flair)
theme_set(theme_minimal())
```

-   Learn about the most recent changes in `ggplot2`
-   Understand the "grammar of graphics" and how it inspired `ggplot2`'s design
-   Know what it means to "map data to aesthetics"
-   Understand the relationship between a "geom" and a "stat"

------------------------------------------------------------------------

![](https://media.springernature.com/w316/springer-static/cover-hires/book/978-0-387-28695-2?as=webp){fig-align="center"}

## A Grammar of Graphics

-   A book by @wilkinson2005
-   Inspired the development of *many* graphics programs including `ggplot2` [@wickham2010]
-   Alternative to having a function for every kind of plot
-   A framework for layering elements to create any kind of plot

## Grammar of Graphics Components

```{r}
#| label: peng_plot
#| include: false
p <- 
  ggplot(penguins, aes(x = body_mass_g, y = bill_length_mm, color = species)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  facet_wrap(vars(island), ncol = 1)
```

::: columns
::: {.column width="50%"}
::: nonincremental
1.  Data
2.  Aesthetics
3.  Scales (and guides)
4.  Geometric objects
5.  Statistics
6.  Facets
7.  Coordinate system
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| fig-height: 5
#| fig-width: 4.5
p
```
:::
:::

::: notes
We're going to go through each of these and examine how they appear in this example plot
:::

## Data

::: columns
::: {.column width="50%"}
What is being visualized?

-   344 observations

-   Body mass measured in grams

-   Bill length measured in mm

-   Three species

-   Three islands
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| fig-height: 5
#| fig-width: 4.5
p
```
:::
:::

## Aesthetics

::: columns
::: {.column width="50%"}
What visual elements are used to encode data?

-   Color

-   x position

-   y position
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| fig-height: 5
#| fig-width: 4.5
p
```
:::
:::

## Scales (and guides)

<!--# TODO: maybe replace image with annotated one like in 2023 presentation  -->

::: columns
::: {.column width="50%"}
What range of data is represented and how is it visualized?

-   x-axis continuous from `r glue_collapse(range(penguins$body_mass_g, na.rm = TRUE), sep = "–")`, 4 major breaks

-   y-axis continuous from `r glue_collapse(range(penguins$bill_length_mm, na.rm = TRUE), sep = "–")`, 3 major breaks

-   Colors are discrete: red, green, blue
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| fig-height: 5
#| fig-width: 4.5
p
```
:::
:::

::: notes
Scales translate data space (in data units) into aesthetic space (e.g. position, color).
A guide (axis or legend) does the inverse—relates visual properties back to data.
:::

## Geometric Objects ("geoms")

::: columns
::: {.column width="50%"}
How are data represented visually?

-   Data is represented using circles/points
-   Trend is represented as a line
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| fig-height: 5
#| fig-width: 4.5
p
```
:::
:::

::: notes
Both aesthetics and geoms are related to the visual representation of data.
To distinguish aesthetics and geoms, think about how geoms can have *many* aesthetics.
E.g. points have position, shape, size, color, and transparency and different data could be mapped to each of those aesthetics.
:::

## Statistics ("stats")

::: columns
::: {.column width="50%"}
What calculations or transformations need to be done to present the data?

-   For points, none (stat = "identity")

-   For trend lines, linear regression
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| fig-height: 5
#| fig-width: 4.5
p
```
:::
:::

## Facets

::: columns
::: {.column width="50%"}
By what variable are different subsets of the data split apart into "small multiples"?

-   Faceted by island
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| fig-height: 5
#| fig-width: 4.5
p
```
:::
:::

::: notes
Not every plot has facets Plots can be faceted by multiple (2) variables in a grid
:::

## Coordinate System

::: columns
::: {.column width="50%"}
How are positions represented visually?

-   Cartesian coordinates
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| fig-height: 5
#| fig-width: 4.5
p
```
:::
:::

::: notes
Other options include polar coordinates or the many possible coordinate systems used in maps.
:::

## Practice

Identify each of the seven components of this plot

::: columns
::: {.column width="50%"}
::: nonincremental
1.  Data
2.  Aesthetics
3.  Scales
4.  Geometric Objects
5.  Statistics
6.  Facets
7.  Coordinate System
:::
:::

::: {.column width="50%"}
[![](https://s3.eu-west-1.amazonaws.com/static.gapminder.org/GapminderMedia/wp-uploads/20161215191134/countries_health_wealth_2016_v13.jpg){fig-align="center"}](https://www.gapminder.org/tag/chart/)
:::
:::

## Break ⏰

```{r}
#| echo: false
countdown::countdown(
  minutes = 10L,
  font_size = "5em",
  left = 0,
  right = 0,
  bottom = 0
)
```

# `ggplot2` and the Grammar of Graphics

::: notes
Now we're going to go through each of the seven components and see some examples of how they are implemented in `ggplot2`
:::

## Data

::: nonincremental
-   Data is *inherited* by default, but can be overridden for specific layers

-   Worked example: jitter plot of raw data with mean ± standard deviation
:::

```{r}
#| fig-align: center
#| fig-height: 4
#| fig-width: 7
library(tidyverse)
library(palmerpenguins)
peng_summary <- 
  penguins |> 
  group_by(island) |> 
  summarize(
    mean_mass = mean(body_mass_g, na.rm = TRUE),
    lower_sd = mean_mass - sd(body_mass_g, na.rm = TRUE),
    upper_sd = mean_mass + sd(body_mass_g, na.rm = TRUE)
  )
ggplot(penguins, aes(x = island, y = body_mass_g)) +
  geom_jitter(alpha = 0.4) +
  geom_pointrange(
    data = peng_summary,
    aes(y = mean_mass, ymin = lower_sd, ymax = upper_sd),
    shape = "square",
    color = "blue"
  )
```

##  {.smaller}

::: r-stack
::: fragment
```{r}
#| echo: true
#| output-location: column
#| fig-height: 5
#| fig-width: 4.5
#| classes: output6040
library(tidyverse)
library(palmerpenguins)

peng_summary <- 
  penguins |> 
  group_by(island) |> 
  summarize(
    mean_mass = mean(body_mass_g, na.rm = TRUE),
    lower_sd = mean_mass - sd(body_mass_g, na.rm = TRUE),
    upper_sd = mean_mass + sd(body_mass_g, na.rm = TRUE)
  )
peng_summary
```
:::

::: fragment
```{r}
#| echo: true
#| output-location: column
#| fig-height: 5
#| fig-width: 4.5
#| classes: output6040
#| code-line-numbers: "15"
library(tidyverse)
library(palmerpenguins)

peng_summary <- 
  penguins |> 
  group_by(island) |> 
  summarize(
    mean_mass = mean(body_mass_g, na.rm = TRUE),
    lower_sd = mean_mass - sd(body_mass_g, na.rm = TRUE),
    upper_sd = mean_mass + sd(body_mass_g, na.rm = TRUE)
  )
# peng_summary

set.seed(123)
ggplot(penguins, aes(x = island, y = body_mass_g)) 
```
:::

::: fragment
```{r}
#| echo: true
#| output-location: column
#| fig-height: 5
#| fig-width: 4.5
#| classes: output6040
#| code-line-numbers: "15-16"
library(tidyverse)
library(palmerpenguins)

peng_summary <- 
  penguins |> 
  group_by(island) |> 
  summarize(
    mean_mass = mean(body_mass_g, na.rm = TRUE),
    lower_sd = mean_mass - sd(body_mass_g, na.rm = TRUE),
    upper_sd = mean_mass + sd(body_mass_g, na.rm = TRUE)
  )
# peng_summary

set.seed(123)
ggplot(penguins, aes(x = island, y = body_mass_g)) +
  geom_jitter(alpha = 0.4)
```
:::

::: fragment
```{r}
#| echo: true
#| output-location: column
#| fig-height: 5
#| fig-width: 4.5
#| classes: output6040
#| code-line-numbers: "17-22|18|19|"
library(tidyverse)
library(palmerpenguins)

peng_summary <- 
  penguins |> 
  group_by(island) |> 
  summarize(
    mean_mass = mean(body_mass_g, na.rm = TRUE),
    lower_sd = mean_mass - sd(body_mass_g, na.rm = TRUE),
    upper_sd = mean_mass + sd(body_mass_g, na.rm = TRUE)
  )
# peng_summary

set.seed(123)
ggplot(penguins, aes(x = island, y = body_mass_g)) +
  geom_jitter(alpha = 0.4) +
  geom_pointrange(
    data = peng_summary,
    aes(y = mean_mass, ymin = lower_sd, ymax = upper_sd),
    shape = "square",
    color = "blue"
  )
```
:::
:::

::: notes
Start by summarizing the `penguins` dataset to get some summary statistics for the error bars.
Notice that `ggplot()` uses the raw data though.\

\
Then add the raw data points, in this case with `geom_jitter()`\
\
Then add the `geom_pointrange()`.
Notice that we override the inherited data with `data = peng_summary` .
The `x` mapping is inherited, but we need to supply new aesthetic mappings for `y`, `ymin`, and `ymax`
:::

## Aesthetics

::: nonicremental
-   Aesthetics are *inherited* when placed in `ggplot()` but can also be specified per layer
-   Aesthetics can be mapped to data or set as constant
:::

::: notes
This might be a good place to look through help files and figure out which aesthetics are valid for mapping
:::

##  {.smaller}

Aesthetic mappings supplied to `ggplot2()` are inherited by all layers

```{r}
#| echo: true
#| output-location: fragment
#| code-line-numbers: "1|"
ggplot(penguins, aes(x = island, y = body_mass_g, color = sex)) +
  geom_boxplot() +
  geom_jitter() 
```

##  {.smaller}

Mappings supplied to a geom only affect that geom.

```{r}
#| echo: true
#| output-location: fragment
#| code-line-numbers: "1,3|"
ggplot(penguins, aes(x = island, y = body_mass_g)) +
  geom_boxplot() +
  geom_jitter(aes(color = sex))
```

##  {.smaller}

Turn off inheritance from `ggplot()` for individual geoms with `inherit.aes = FALSE`.

```{r}
#| echo: true
#| output-location: fragment
#| code-line-numbers: "2|"
ggplot(penguins, aes(x = island, y = body_mass_g, color = sex)) +
  geom_boxplot(aes(x = island, y = body_mass_g), inherit.aes = FALSE) +
  geom_jitter()
```

##  {.smaller}

Setting an aesthetic (rather than mapping to data with `aes()`)

```{r}
#| echo: true
#| output-location: fragment
#| code-line-numbers: "2-3|"
ggplot(penguins, aes(x = island, y = body_mass_g, color = sex)) +
  geom_boxplot(color = "black") +
  geom_jitter(color = "darkred")
```

## Scales

<!-- TODO: come up with a worked example for this one -->

-   There are *many* `scale_` functions
-   Modifying scales is one way to modify legends

## Geoms

-   Every geom has a default stat, but it can be overridden
-   Not all geoms use the same aesthetics
-   Worked example: explore the anatomy of a help file (e.g. `?geom_point()`)
    -   How can you determine the default stat for a geom?
    -   How can you find out what aesthetics a geom has?

##  {.smaller}

```{r}
#| echo: true
#| fig-align: center
df <- expand_grid(x = LETTERS[1:5], y = 1:5)
ggplot(df) +
  geom_point(aes(x = x, y = y, 
        color = x, shape = x,
        size = y, alpha = y, stroke = y))
```

::: callout-caution
With great power, comes great responsibility!
It's not always a *good idea* to map data to aesthetics just because you can.
Stay tuned for part 2 of this series for more!
:::

## Stats

<!-- NOTE: an alternative to this would be to talk about how the stats of some geoms (e.g. geom_histogram()) actually return multiple values that you can select from with `after_stat()`.  Maybe that is more useful? -->

-   Every stat has a default geom and you *usually* use the `geom_*()` function
-   Some stats *don't* have an equivalent geom
-   Worked example: adding mean ± SD on top of jitter plot with `stat_summary()`

::: notes
might also demonstrate using a non-default geom for a stat
:::

## `stat_summary()` key arguments

`fun.data`—A function that is given the complete data and should return a data frame with variables ymin, y, and ymax.

```{r}
#| echo: true
mean_sdl(rnorm(100), mult = 1)
```

::: callout-note
`mult` multiplies the standard deviation.
The default is `2`.
:::

. . .

`fun.args`—list of arguments to function in `fun.data` (optional)

. . .

`geom`—default is `"pointrange"`, but could be anything that uses `y`, `ymin` and `ymax` aesthetic mappings

##  {.smaller}

```{r}
#| echo: true
#| fig-align: center
#| code-line-numbers: "|4-9|5|6|"
set.seed(123)
ggplot(penguins, aes(x = island, y = body_mass_g)) +
  geom_jitter(alpha = 0.4) +
  stat_summary(
    fun.data = "mean_sdl",
    fun.args = list(mult = 1),
    color = "blue",
    shape = "square"
  )
```

## Use your own function

```{r}
#| echo: true
#| fig-align: center
#| code-line-numbers: "|1-3|6"
median_80 <- function(vals) {
   tibble(y = median(vals, na.rm = TRUE), ymin = quantile(vals, 0.1), ymax = quantile(vals, 0.9))
}
ggplot(penguins, aes(x = island, y = body_mass_g)) +
  geom_jitter(alpha = 0.4) +
  stat_summary(fun.data = "median_80")
```

## Facets

-   Implemented with `facet_wrap()` and `facet_grid()`
-   Facets will be explored more in part 2 of this series

## Coords

-   Adjusting x and y limits with `coord_cartesian()` behaves differently than adjusting them with `scale_<x/y>_continuous()`
-   `coord_polar()` for polar data

## References

::: refs
:::
