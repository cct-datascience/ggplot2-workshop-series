---
title: "Exploring the Wide World of ggplot2 Extensions"
author: 
  - "Eric R. Scott"
  - "Kristina Riemer"
  - "Renata Diaz"
date: 2024-06-20
format: 
  uaz-revealjs: default
execute: 
  echo: true
editor: visual
---

## Learning Objectives

-   Understand where to find packages that extend `ggplot2`
-   Demonstrate some extension packages
    -   Assemble multi-panel figures with `patchwork`
    -   Make animated plots with `gganimate`
    -   Visualize distributions with `ggdist`
    -   Plot network data with `ggraph`

## Packages

```{r}
library(ggplot2)
library(palmerpenguins) #for example dataset
library(patchwork) #for multi-panel figures
library(gridGraphics) #for combining ggplot2 and base R figures
library(gganimate) #for animated plots
library(ggdist) #for showing distributions + uncertainty in data
library(dplyr) #for cleaning data
library(ggraph) #for network data
```

# Extensions to `ggplot2`

There are many kinds of extensions to `ggplot2`, ranging from simple to complex, from familiar to transformative.

## General-use and modular

```{r}
#| code-line-numbers: "|1,4|2,5"
#| fig-align: center
library(ggbeeswarm)
library(ggthemes)
ggplot(penguins, aes(x = species, y = body_mass_g)) +
  geom_beeswarm() +
  theme_economist()

```

::: notes
`geom_beeswarm()` can easily be combined with other `geom_`s
:::

## "All-in-one" functions

```{r}
#| code-line-numbers: "|1,2|3"
#| fig-align: center
library(ggstatsplot)
ggbetweenstats(penguins, species, body_mass_g) +
  scale_y_continuous("Body Mass (g)", n.breaks = 10)
```

::: notes
With great power comes great responsibilityâ€”make sure you trust these stats!\
Notice that the output is a ggplot object, so you can continue to add layers to it.
:::

## Transformative & field-specific

::: {layout-ncol="2"}
[![ggspectra](https://exts.ggplot2.tidyverse.org/gallery/images/ggspectra.png){width="100%"}](https://docs.r4photobiology.info/ggspectra)

[![gggenes](https://exts.ggplot2.tidyverse.org/gallery/images/gggenes.png){width="100%"}](https://wilkox.org/gggenes)
:::

## Finding Extensions

-   Browse the `ggplot2` [extensions gallery](https://exts.ggplot2.tidyverse.org/gallery/)

-   Check out the [Awesome `ggplot2`](https://github.com/erikgahner/awesome-ggplot2#readme) list

-   [The R Graph Gallery](https://r-graph-gallery.com/)

-   Google search with "ggplot2" keyword

# Package Demos

## `patchwork`

`patchwork` allows you to compose multi-panel figures with ease

```{r}
#| echo: false
#| fig-align: center
p1 <- ggplot(penguins, aes(x = body_mass_g, y = bill_length_mm, color = species)) +
  geom_point()
p2 <- ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm, color = species)) +
  geom_point()
p3 <- ggplot(penguins, aes(x = body_mass_g)) + 
  facet_wrap(vars(island)) +
  geom_histogram() +
  theme(axis.title.y = element_blank())

(p1 + p2 + plot_layout(guides = "collect")) / p3 +
  plot_annotation(tag_levels = "A", tag_suffix = ")")
```

::: notes
Things to notice:

-   Plots areas are aligned despite one not having a y-axis label
-   Only one legend
-   Labels for panels A, B, C
:::

## Example plots

```{r}
p1 <- 
  ggplot(penguins, aes(x = body_mass_g, 
                       y = bill_length_mm, 
                       color = species)) +
  geom_point()
p2 <-
  ggplot(penguins, aes(x = bill_depth_mm, 
                       y = bill_length_mm, 
                       color = species)) +
  geom_point()
p3 <- 
  ggplot(penguins, aes(x = body_mass_g)) + 
  facet_wrap(vars(island)) +
  geom_histogram()
```

## Combine plots

-   `+` wraps plots
-   `|` combines plots horizontally
-   `/` combines plots vertically
-   `()` can be used to nest operations

## Combine plots

```{r}
(p1 | p2) / p3
```

## Combine guides

If plots have *identical* guides, you can combine them with `plot_layout(guides = "collect")`

```{r}
p1 + p2 + plot_layout(guides = "collect")
```

::: notes
identical means same scale, same title, same glyph
:::

## Combining axes

As of the most recent version of `patchwork` (v1.2.0) you can also combine identical axes.

```{r}
p1 + p2 + plot_layout(guides = "collect", axes = "collect")
```

## Controlling layout

For more options for controlling layout, see the related vignette on the package website.

-   Adding empty areas
-   Inset plots
-   Adjusting widths and heights

## Tags

You can add "tags" to each panel with `plot_annotation()`

```{r}
p1 + p2 + plot_annotation(tag_levels = "A", tag_suffix = ")")
```

## Modifying all panels

You can use the `&` operator instead of `+` to modify **all** elements of a multi-panel figure.

```{r}
p1 + p2 & theme_bw() & scale_color_viridis_d()
```

## Using with base R plots

You can even combine `ggplot2` plots with base R plots with a special syntax

```{r}
p1 + ~hist(penguins$bill_depth_mm, main = "")
```

## `gganimate`

Display transitions between states of a variable

Useful for showing trends in time series & spatial data

::: callout-tip
## Advice from the experts!

"Graphic elements should only transition between instances of the same underlying phenomenon"
:::

## Example

Body size distribution of penguins changing over the years

```{r}
ggplot(penguins, aes(x = body_mass_g, col = species)) +
  geom_density() +
  facet_wrap(~year)
```

## Show annual transition

```{r, cache=TRUE}
library(gganimate)

ggplot(penguins, aes(x = body_mass_g, col = species)) +
  geom_density() +
  transition_time(year) +
  ggtitle('Year: {frame_time}')
```

## Add history

```{r, cache=TRUE}
ggplot(penguins, aes(x = body_mass_g, col = species)) +
  geom_density() +
  transition_time(year) +
  ggtitle('Year: {frame_time}') +
  shadow_wake(wake = 0.3, wrap = FALSE)
```

## Modify transition speed

```{r, cache=TRUE}
ggplot(penguins, aes(x = body_mass_g, col = species)) +
  geom_density() +
  transition_time(year) +
  ggtitle('Year: {frame_time}') +
  ease_aes("quintic-in-out")
```

## Have axes follow data

```{r, cache=TRUE}
ggplot(penguins, aes(x = body_mass_g, col = species)) +
  geom_density() +
  transition_time(year) +
  ggtitle('Year: {frame_time}') +
  view_follow()
```

## Save file

```{r, eval=FALSE}
anim_save("~/Desktop/test_anim.gif")
```

# `ggdist` for distributions {.smaller}

-   Easily add nuance to density/histogram/ribbon plots
-   Particularly useful for:
    -   Sample data
    -   Fitted values + uncertainty
    -   Frequentist or Bayesian parameter distributions

```{r, echo=FALSE}
penguins <- penguins |>
  filter(!is.na(sex))
```

## `slabinterval`

```{r slabinterval, echo = T}
penguins %>%
  ggplot(aes(x = body_mass_g, y = species)) +
  stat_slabinterval()

```

::: notes
-   This plots a "halfeye" plot with a density distribution and a line at the bottom showing the mean and quantiles of the data.
-   Note that we didn't have to create any new objects; stat_slabinterval automatically calculates densities and summary statistics. There are corresponding geom\_\* functions for already summarized data.
-   Other plot types within ggdist are variations on the stat_slabinterval theme.
-   Often you'll want to use these shortcuts instead of building something up out of scratch.
:::

## Example: `dotsinterval`

```{r, echo = T}
penguins %>%
  ggplot(aes(x = body_mass_g, y = species)) +
  stat_dotsinterval()
```

## Example: `interval`

```{r, echo = T}
penguins %>%
  ggplot(aes(x = body_mass_g, y = species)) +
  stat_interval()
```

## Example: `interval`

```{r, echo = T}
penguins %>%
  ggplot(aes(x = body_mass_g, y = species)) +
  stat_interval() +
  scale_color_brewer()
```

## Combining elements: Raincloud plots

```{r, echo = T}
penguins %>%
  ggplot(aes(x = body_mass_g, y = species)) +
  stat_slabinterval() +
  stat_dotsinterval(side = "bottom")

```


## Ribbon plots

`stat_lineribbon` plots quantile intervals around a line automatically:

```{r, echo = T}
penguins %>%
  ggplot(aes(x = year, y = body_mass_g)) +
  stat_lineribbon() +
  scale_fill_brewer() +
  facet_wrap(vars(species))
```

## Ribbon plots

You can control the bands using the `.width` argument:

```{r, echo = T}
penguins %>%
  ggplot(aes(x = year, y = body_mass_g)) +
  stat_lineribbon(.width = c(.8, .97, .99)) +
  scale_fill_brewer() +
  facet_wrap(vars(species))
```

## Ribbon plots

`.width = ppoints()` creates a gradient:

```{r, echo = T}
penguins %>%
  ggplot(aes(x = year, y = body_mass_g, fill = after_stat(.width))) +
  stat_lineribbon(.width = ppoints(100)) +
  scale_fill_distiller() +
  facet_wrap(vars(species))
```

## Visualizing frequentist model output

Combined with the `broom` and `distributional` packages, `ggdist` can display frequentist model uncertainty.

## Visualizing frequentist model output

```{r, echo = T}

library(broom)
library(distributional)

penguin_lm <- lm(body_mass_g ~  species, data = penguins)

broom::tidy(penguin_lm)

```

## Visualizing frequentist model output

```{r, echo = T}

broom::tidy(penguin_lm) |>
  ggplot(aes(y = term)) +
    stat_halfeye(
      aes(xdist = dist_student_t(df = df.residual(penguin_lm), 
                                 mu = estimate, 
                                 sigma = std.error))
    )
```

## Visualizing frequentist model output

-   You can also use ribbons to show uncertainty around lines of fit.
-   We'll need a linear model with a continuous predictor.
-   And we'll use `tidyr::expand` and `broom::augment` to get the predicted line of fit from the model.

## Visualizing frequentist model output

```{r, echo = T}

penguin_lm_cont <- lm(body_mass_g ~  year + species, data = penguins)

penguin_lm_cont_fitted <- penguins %>%
  group_by(species) %>%
  tidyr::expand(year = seq(min(year), max(year), length.out = 3)) %>%
  augment(penguin_lm_cont, newdata = ., se_fit = TRUE) 

head(penguin_lm_cont_fitted) 

```

## Visualizing frequentist model output

```{r, echo = T}

  ggplot(penguin_lm_cont_fitted, aes(x = year)) +
  stat_lineribbon(
    aes(ydist = dist_student_t(df = df.residual(penguin_lm_cont), 
                               mu = .fitted, 
                               sigma = .se.fit))) +
  facet_wrap(vars(species)) +
  scale_fill_brewer() 

```

## Visualizing Bayesian model components

-   `ggdist` plots are great for visualizing Bayesian model components:
    -   priors
    -   posterior draws
    -   posterior predictions
-   We can fit a simple Bayesian linear model and visualize the posterior...

## Fitting a model

```{r, echo = F}
library(brms)
library(tidybayes)

load(here::here("2024", "03-extensions", "penguins_brm.RDS"))
```

```{r, echo = T, eval = F}

library(brms)
library(tidybayes)

penguins_brm <- brm(body_mass_g ~ species, data = penguins, iter = 1000)

```

## Extracting draws from the posterior

```{r, echo = T}
penguins_brm %>%
tidybayes::gather_draws(
c(b_Intercept,
b_speciesChinstrap,
b_speciesGentoo)
) |>
head() 
```


## Posterior draws rainclouds

```{r, echo = T}
penguins_brm |>
tidybayes::gather_draws(
c(b_Intercept,
b_speciesChinstrap,
b_speciesGentoo)) %>%
ggplot(aes(y = .variable, x = .value)) +  
  geom_dotsinterval(side = "bottom", dotsize = .05) + 
  stat_slabinterval() 
```

## Takeaways

-   `ggdist` contains `geom` and `stat` functions for plotting distributions.
-   Slab functions show variations on density plots.
-   Ribbons show variation around a line.
-   `ggdist` plays nicely with Bayesian and frequentist modeling frameworks.

# Relational data with `ggraph`

## `ggraph` {.smaller}

-   For plotting networks, graphs, and trees
-   Adds **layouts** and geoms for nodes and edges
-   Integrates with [`tidygraph`](https://ggraph.data-imaginist.com/articles/tidygraph.html) to wrap around numerous other graph object types (`igraph`, `dedrogram`, `hclust`, `graph`, `phylo`, ...)

## Example: Mouse data

Begin by loading network data, in this case from the `graphml` format.

Data from [So et al. 2015](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0134509), in the [Animal Social Networks Repository](https://github.com/bansallab/asnr/tree/master).

```{r, echo = TRUE}

library(igraph)
library(tidygraph)

mouse_sniffing <- read_graph(here::here("2024", "03-extensions", "mouse_so_grooming_network.graphml"),
format = "graphml")

```

## Example: `as_tbl_graph`

`tidygraph::as_tbl_graph` standardizes different graph storage formats.

```{r, echo = T}
mouse_graph <- mouse_sniffing |>
as_tbl_graph() 
```

## Plotting mouse sniffing data

```{r, echo = T}
ggraph(mouse_graph, layout = 'kk') + 
    geom_edge_fan() + 
    geom_node_point() +
    theme_minimal() +
    ggtitle("Mouse sniffs")
```

## Alternate layouts

```{r, echo = T}
ggraph(mouse_graph, layout = 'eigen') + 
    geom_edge_fan() + 
    geom_node_point() +
    theme_minimal() +
    ggtitle("Mouse sniffs")
```

## Alternate layouts

```{r, echo = T}
ggraph(mouse_graph, layout = 'linear', circular = TRUE) + 
    geom_edge_fan() + 
    geom_node_point() +
    theme_minimal() +
    ggtitle("Mouse sniffs")
```

## Example: phylogenies

-   `ggraph` can plot phylogenetic trees.
-   We'll get a phylogeny using the R Open Tree of Life (`rotl`) and plot it.

## Getting a phylogeny

![](krat.jpg){fig-align="center"}

## Getting a phylogeny

```{r, echo = TRUE, warning = F}
library(rotl)
rodent_id <- tnrs_match_names("Heteromyidae")
rodent_tree <- tol_subtree(ott_id = ott_id(rodent_id))
rodent_tree$node.label <- c(1:64)
class(rodent_tree)
```

## Convert the phylogeny to a graph

```{r, echo = T}

rodent_graph <- as_tbl_graph(rodent_tree)

```

## Dendrogram

```{r, echo = T}

ggraph(rodent_graph, "dendrogram") +
geom_edge_link()

```

## Unrooted tree

```{r, echo = T}

ggraph(rodent_graph, "unrooted") +
geom_edge_link()

```

## Takeaways

- `ggraph` can plot many different types of network objects.
- Use `as_tbl_graph` to convert graphs to `ggraph`-compatible objects.
- Layouts strongly determine the appearance and interpretability of a graph.






## Extensions Resources

`patchwork`

-   [Package website](https://patchwork.data-imaginist.com/index.html)

`gganimate`

-   [Cheat sheet](https://rstudio.github.io/cheatsheets/gganimate.pdf)
-   [Website](https://gganimate.com)

`ggdist`

- [Documentation](https://mjskay.github.io/ggdist/index.html)
- More about [tidybayes](http://mjskay.github.io/tidybayes/)

## Extensions Resources

`ggraph`

- [`ggraph` documentation](https://ggraph.data-imaginist.com/index.html)
- [`tidygraph` documentation](https://tidygraph.data-imaginist.com/)
- [`igraph` R package documentation](https://r.igraph.org/)
- [`rotl` documentation](https://cran.r-project.org/web/packages/rotl/rotl.pdf)

## Getting Help

-   Our [drop-in hours](https://datascience.cct.arizona.edu/drop-in-hours)

-   [UA Data Science Slack](https://join.slack.com/t/uadatascience/shared_invite/zt-1xjxht9k0-E489WA6axO_SRVeKQh3cXg)

# Anything we missed?

Got a `ggplot2` question we didn't cover in this workshop series?
Let's figure it out together!

## Data sources

Pratha Sah, JosÃ© David Mendez, Shweta Bansal.
A multi-species repository of social networks.
Scientific Data, 6:44 (2019)

So, N., Franks, B., Lim, S., and Curley, J.P.
2015.
A social network approach reveals associations between mouse social dominance and brain gene expression.
PlosOne 10(7):e0134509
